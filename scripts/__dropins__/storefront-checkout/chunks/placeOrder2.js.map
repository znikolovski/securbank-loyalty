{"version":3,"file":"placeOrder2.js","sources":["../../src/data/transforms/transform-customer.ts","../../src/api/getCart/getCart.ts","../../src/api/getCustomer/graphql/getCustomer.graphql.ts","../../src/api/getCustomer/getCustomer.ts","../../src/api/getStockStatus/graphql/getStockStatus.graphql.ts","../../src/api/getStockStatus/getStockStatus.ts","../../src/api/placeOrder/graphql/placeOrder.graphql.ts","../../src/utils/storefrontEvents/completeCheckout.ts","../../src/api/placeOrder/placeOrder.ts"],"sourcesContent":["import { GetCustomerQuery } from '@/checkout/__generated__/types';\nimport {\n  Customer as CustomerModel,\n  CustomerAddress as CustomerAddressModel,\n  CustomAttribute as CustomAttributeModel,\n} from '@/checkout/data/models';\n\ntype Customer = GetCustomerQuery['customer'];\ntype NonNullableCustomer = NonNullable<Customer>;\ntype CustomAttributesV2 = CustomerAddress['custom_attributesV2'];\ntype CustomerAddresses = NonNullableCustomer['addresses'];\ntype CustomerAddress = NonNullable<NonNullable<CustomerAddresses>[number]>;\n\nconst isValidCustomAttribute = (attribute: any): boolean => {\n  if (!attribute) return false;\n  return 'code' in attribute && 'value' in attribute;\n};\n\nexport const transformCustomAttributesV2 = (\n  data: CustomAttributesV2\n): CustomAttributeModel[] => {\n  return data.filter(isValidCustomAttribute).map((attribute) => {\n    const { code, value } = attribute as { code: string; value: string };\n    return { code, value };\n  });\n};\n\nconst transformCustomerAddress = (\n  data: CustomerAddress\n): CustomerAddressModel => {\n  const street = data.street!.filter(Boolean) as string[];\n  const regionId = data.region?.region_id;\n  const hasRegionId = regionId && regionId > 0;\n\n  return {\n    id: String(data.id),\n    firstName: data.firstname!,\n    lastName: data.lastname!,\n    company: data.company || undefined,\n    city: data.city!,\n    street,\n    postCode: data.postcode || undefined,\n    vatId: data.vat_id || undefined,\n    telephone: data.telephone || undefined,\n    region: {\n      id: hasRegionId? regionId : undefined,\n      code: data.region?.region_code!,\n      name: data.region?.region!,\n    },\n    country: {\n      value: data.country_code!,\n      label: data.country_code!,\n    },\n    customAttributes: transformCustomAttributesV2(data.custom_attributesV2),\n  };\n};\n\nconst transformCustomerAddresses = (\n  data: CustomerAddresses\n): CustomerAddressModel[] => {\n  if (!data) return [];\n\n  const customerAddresses = data.filter(Boolean) as CustomerAddress[];\n  return customerAddresses.map(transformCustomerAddress);\n};\n\nconst transformDefaultAddress = (\n  type: 'default_billing' | 'default_shipping',\n  data: CustomerAddresses\n): CustomerAddressModel | undefined => {\n  if (!data) return;\n\n  const address = data.find((address) => address?.[type] === true);\n\n  if (!address) return;\n\n  return transformCustomerAddress(address);\n};\n\nconst transformCustomer = (data: Customer): CustomerModel | undefined => {\n  if (!data) return;\n\n  const addresses = data.addresses;\n\n  return {\n    firstName: data.firstname || '',\n    lastName: data.lastname || '',\n    email: data.email || '',\n    addresses: transformCustomerAddresses(addresses),\n    defaultBillingAddress: transformDefaultAddress(\n      'default_billing',\n      addresses\n    ),\n    defaultShippingAddress: transformDefaultAddress(\n      'default_shipping',\n      addresses\n    ),\n  };\n};\n\nexport { transformCustomer };\n","import {\n  getCartQuery,\n  getCustomerCartQuery,\n} from '@/checkout/api/getCart/graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { transformCart } from '@/checkout/data/transforms/transform-cart';\n\nexport const getCart = async (cartId?: string) => {\n  return await dispatchApiCall({\n    type: 'query',\n    query: cartId ? getCartQuery : getCustomerCartQuery,\n    options: {\n      method: 'POST',\n      cache: 'no-cache',\n      ...(cartId ? { variables: { cartId } } : {}),\n    },\n    path: 'cart',\n    signalType: 'cart',\n    transformer: transformCart,\n  });\n};\n","export const getCustomerQuery = /* GraphQL */ `\n  query getCustomer {\n    customer {\n      firstname\n      lastname\n      email\n      addresses {\n        id\n        default_shipping\n        default_billing\n        city\n        country_code\n        firstname\n        lastname\n        company\n        postcode\n        vat_id\n        region {\n          region\n          region_id\n          region_code\n        }\n        street\n        telephone\n        custom_attributesV2 {\n          ... on AttributeValue {\n            code\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n","import { getCustomerQuery } from '@/checkout/api/getCustomer/graphql/getCustomer.graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { Customer } from '@/checkout/data/models';\nimport { transformCustomer } from '@/checkout/data/transforms';\n\nexport const getCustomer = async (): Promise<Customer | null | undefined> => {\n  return await dispatchApiCall({\n    type: 'query',\n    query: getCustomerQuery,\n    options: { method: 'POST', cache: 'no-cache' },\n    path: 'customer',\n    signalType: 'customer',\n    transformer: transformCustomer,\n  });\n};\n","export const CART_STOCK_STATUS_FRAGMENT = /* GraphQL */ `\n  fragment CartStockStatus on Cart {\n    id\n    items {\n      __typename\n      uid\n      product {\n        uid\n        name\n        sku\n        stock_status\n        only_x_left_in_stock\n        ... on ConfigurableProduct {\n          variants {\n            attributes {\n              uid\n            }\n            product {\n              uid\n              stock_status\n            }\n          }\n        }\n        ... on BundleProduct {\n          items {\n            uid\n            options {\n              uid\n              product {\n                uid\n              }\n            }\n          }\n        }\n      }\n      quantity\n      ... on ConfigurableCartItem {\n        configurable_options {\n          configurable_product_option_uid\n          option_label\n          configurable_product_option_value_uid\n          value_label\n        }\n      }\n      ... on BundleCartItem {\n        bundle_options {\n          uid\n          values {\n            uid\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const getCartStockStatusQuery = /* GraphQL */ `\n  query getCartStockStatus($cartId: String!) {\n    cart(cart_id: $cartId) {\n      ...CartStockStatus\n    }\n  }\n  ${CART_STOCK_STATUS_FRAGMENT}\n`;\n\nexport const getCustomerCartStockStatusQuery = /* GraphQL */ `\n  query getCustomerCartStockStatus {\n    cart: customerCart {\n      ...CartStockStatus\n    }\n  }\n  ${CART_STOCK_STATUS_FRAGMENT}\n`;\n","import {\n  BundleCartItem,\n  BundleProduct,\n  Cart,\n  ConfigurableCartItem,\n  ConfigurableProduct,\n  DownloadableCartItem,\n  GiftCardCartItem,\n  ProductInterface,\n  ProductStockStatus,\n  SimpleCartItem,\n  VirtualCartItem,\n} from '@/checkout/__generated__/types';\nimport { fetchGraphQl } from '@/checkout/api';\nimport { FetchError } from '@/checkout/api/errors';\nimport { handleNetworkError } from '@/checkout/lib/network-error';\nimport {\n  getCartStockStatusQuery,\n  getCustomerCartStockStatusQuery,\n} from '@/checkout/api/getStockStatus/graphql/getStockStatus.graphql';\n\ninterface StockChecker {\n  (item: CartItem): boolean;\n}\n\ntype StockStatusOutput = {\n  cart: Pick<Cart, 'id' | 'items'>;\n};\n\ntype CartItem =\n  | BundleCartItem\n  | ConfigurableCartItem\n  | DownloadableCartItem\n  | GiftCardCartItem\n  | SimpleCartItem\n  | VirtualCartItem;\n\nconst isProductInStock = (product: ProductInterface): boolean => {\n  return product.stock_status === ProductStockStatus.InStock;\n};\n\nconst simpleStockChecker: StockChecker = (item) => {\n  return isProductInStock(item.product);\n};\n\nconst configStockChecker: StockChecker = (item) => {\n  const { configurable_options: options } = item as ConfigurableCartItem;\n  const { variants } = item.product as ConfigurableProduct;\n\n  if (!variants || !options) return false;\n\n  const selectedOptions = options.map(\n    (option) => option?.configurable_product_option_value_uid\n  );\n\n  const selectedVariant = variants.find((variant) => {\n    if (!variant || !variant.attributes) return false;\n\n    return variant.attributes.every(\n      (attribute) => attribute && selectedOptions.includes(attribute.uid)\n    );\n  });\n\n  // if no matching variant is found, we assume the product is out of stock\n  if (!selectedVariant) return false;\n\n  const { product: variantProduct } = selectedVariant;\n\n  if (!variantProduct) return false;\n\n  return isProductInStock(variantProduct);\n};\n\nconst bundleStockChecker: StockChecker = (item) => {\n  const { product } = item as BundleCartItem;\n\n  if (!isProductInStock(product)) return false;\n\n  // if any of the items inside the bundle is ouf of stock, it will not be part of this list\n  const { bundle_options: options } = item as BundleCartItem;\n  const { items: bundle } = product as BundleProduct;\n\n  return bundle?.length === options?.length;\n};\n\nconst getStockChecker = (type?: string): StockChecker => {\n  switch (type) {\n    case 'ConfigurableCartItem':\n      return configStockChecker;\n    case 'BundleCartItem':\n      return bundleStockChecker;\n    default:\n      return simpleStockChecker;\n  }\n};\n\nconst isOutOfStock = (item: CartItem) => {\n  const checker = getStockChecker(item.__typename);\n  return checker(item) === false;\n};\n\nexport const getStockStatus = async (\n  cartId?: string\n): Promise<ProductStockStatus> => {\n  const { data, errors } = await fetchGraphQl<StockStatusOutput>(\n    cartId ? getCartStockStatusQuery : getCustomerCartStockStatusQuery,\n    {\n      method: 'GET',\n      cache: 'no-cache',\n      ...(cartId ? { variables: { cartId } } : {}),\n    }\n  ).catch(handleNetworkError);\n\n  if (errors) throw new FetchError(errors);\n\n  const cartItems = data?.cart?.items;\n\n  if (!cartItems || !cartItems.length) return ProductStockStatus.InStock;\n\n  const outOfStock = cartItems.filter((item) => {\n    if (!item) return false;\n    return isOutOfStock(item as CartItem);\n  });\n\n  return outOfStock.length > 0\n    ? ProductStockStatus.OutOfStock\n    : ProductStockStatus.InStock;\n};\n","export const placeOrderMutation = /* GraphQL */ `\n  mutation placeOrder($cartId: String!) {\n    placeOrder(input: { cart_id: $cartId }) {\n      orderV2 {\n        number\n        token\n      }\n    }\n  }\n`;\n","import { cartSignal } from '@/checkout/signals';\nimport { CartTaxItem } from '@/checkout/__generated__/types';\nimport {\n  ConfigurableOption,\n  Order,\n  ShoppingCart,\n  ShoppingCartItem,\n} from '@/checkout/types/CompleteCheckoutContextSchemas';\nimport { Cart } from '@/checkout/data/models/cart';\nimport { Item, ItemKind } from '@/checkout/data/models/cart-item';\nimport { ShippingMethod } from '@/checkout/data/models';\n\nfunction mapConfigurableOptions(\n  options: Record<string, string>\n): ConfigurableOption[] | undefined {\n  const result: ConfigurableOption[] = [];\n\n  for (const key in options) {\n    if (options[key] === null) continue;\n\n    result.push({\n      optionLabel: key,\n      valueLabel: options[key],\n    });\n  }\n\n  return result;\n}\n\nfunction mapCartItems(items: Item[]): ShoppingCartItem[] {\n  return items.map((item: Item): ShoppingCartItem => {\n    const { uid, name, sku, price, quantity } = item;\n\n    let cartItem: ShoppingCartItem = {\n      /* We don't know if Checkout drop-in can apply Manufacturer’s Suggested Retail Price */\n      canApplyMsrp: true,\n      formattedPrice: '',\n      id: uid,\n      prices: {\n        price: {\n          value: price.value ?? 0,\n          currency: price.currency ?? '',\n        },\n      },\n      product: {\n        /* productId not exposed by core GraphQL as number (uid is string) */\n        productId: 0,\n        name,\n        sku,\n        productType: item.kind,\n        canonicalUrl: item.url || '',\n        mainImageUrl: item?.image?.src || '',\n      },\n      quantity,\n    };\n\n    if (item.kind === ItemKind.Configurable) {\n      cartItem.configurableOptions =\n        // @ts-ignore\n        mapConfigurableOptions(item.configurableOptions);\n    }\n\n    return cartItem;\n  }, []);\n}\n\n/**\n * This function builds the ShoppingCart context.\n * It maps the shopping cart data collected during the checkout process to the\n * specific schema format defined by the Adobe Commerce Events SDK.\n *\n * @param {Cart} cart The cart data collected during the checkout process.\n * @returns {ShoppingCart} The ShoppingCart data formated.\n */\nfunction buildShoppingCartContext(cart: Cart): ShoppingCart {\n  const { id, items, prices, totalQty } = cart;\n  const hasItems = !!items?.length;\n\n  let shoppingCartContext: ShoppingCart = {\n    id,\n    prices: {\n      subtotalExcludingTax: {\n        value: prices?.subtotal_excluding_tax?.value ?? 0,\n        currency: prices?.subtotal_excluding_tax?.currency ?? '',\n      },\n      subtotalIncludingTax: {\n        value: prices?.subtotal_including_tax?.value ?? 0,\n        currency: prices?.subtotal_including_tax?.currency ?? '',\n      },\n    },\n    totalQuantity: totalQty,\n    possibleOnepageCheckout: true,\n  };\n\n  if (hasItems) {\n    shoppingCartContext.items = mapCartItems(items);\n  }\n\n  return shoppingCartContext;\n}\n\nfunction calculateTaxes(taxes: (CartTaxItem | null)[]): number {\n  const totalTaxAmount = taxes.reduce(\n    (total, tax) => total + tax!.amount.value!,\n    0\n  );\n\n  return totalTaxAmount;\n}\n\nfunction buildShippingMethod(method: ShippingMethod) {\n  return {\n    shippingMethod: `${method.carrier.code}_${method.code}`,\n    shippingAmount: method.amount.value ?? 0,\n  };\n}\n\n/**\n * This function builds the Order context.\n * It maps the order data collected during the checkout process to the specific\n * schema format defined by the Adobe Commerce Events SDK.\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @param {Cart} cart The cart data collected during the checkout process.\n * @returns {Order} The Order data formated.\n */\nfunction buildOrderContext(orderId: string, cart: Cart): Order {\n  const { coupons, email, prices, selectedPaymentMethod, shippingAddresses } =\n    cart;\n  const hasAddresses = !!shippingAddresses?.length;\n\n  let orderContext: Order = {\n    appliedCouponCode: coupons[0]?.code ?? '',\n    email: email ?? '',\n    grandTotal: prices?.grand_total?.value ?? 0,\n    orderId,\n    orderType: 'checkout',\n    otherTax: 0,\n    paymentMethodCode: selectedPaymentMethod?.code ?? '',\n    paymentMethodName: selectedPaymentMethod?.title ?? '',\n    payments: [\n      /* By now the Checkout drop-in is only supporting one payment method */\n      {\n        paymentMethodCode: selectedPaymentMethod?.code ?? '',\n        paymentMethodName: selectedPaymentMethod?.title ?? '',\n        total: prices?.grand_total?.value ?? 0,\n      },\n    ],\n    salesTax: calculateTaxes(prices?.applied_taxes ?? []),\n    subtotalExcludingTax: prices?.subtotal_excluding_tax?.value ?? 0,\n    subtotalIncludingTax: prices?.subtotal_including_tax?.value ?? 0,\n  };\n\n  if (hasAddresses) {\n    const firstAddress = shippingAddresses[0];\n    const selectedShippingMethod = firstAddress?.selectedShippingMethod;\n\n    if (selectedShippingMethod) {\n      orderContext.shipping = buildShippingMethod(selectedShippingMethod);\n    }\n  }\n\n  return orderContext;\n}\n\n/**\n * This function sets both ShoppingCart and Order contexts to the ACDL before\n * firing the \"place-order\" event.\n * This code has been extracted from the ContextManager class (included into\n * the Adobe Commerce Events SDK package) and adapted in order to use directly\n * the ACDL own API methods.\n *\n * Code based on:\n *  ContextManager.ts::setShoppingCart(context: ShoppingCart): void\n *  ContextManager.ts::setOrder(context: Order): void\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @returns {void}\n *\n * ContextManager class @see https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-sdk/src/ContextManager.ts\n */\nfunction setContext(orderId: string): void {\n  const { data } = cartSignal.value;\n\n  const shoppingCartContext = buildShoppingCartContext(data!);\n  const orderContext = buildOrderContext(orderId, data!);\n\n  window.adobeDataLayer = window.adobeDataLayer || [];\n\n  // First of all it deletes the previously added data layer context entries\n  window.adobeDataLayer.push(\n    { shoppingCartContext: null },\n    { orderContext: null }\n  );\n\n  // and finally it adds the specific data layer context entries for that request\n  window.adobeDataLayer.push({ shoppingCartContext }, { orderContext });\n}\n\n/**\n * This function publishes the \"place-order\" event pushing it to the ACDL (a\n * plain JavaScript Array that serves as a queue).\n * This code has been extracted from the PublishManager class (included into\n * the Adobe Commerce Events SDK package) and adapted in order to use directly\n * the ACDL own API methods.\n *\n * Code based on:\n *  PublishManager.ts::placeOrder(context?: CustomContext): void\n *\n * @returns {void}\n *\n * PublishManager class @see https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-sdk/src/PublishManager.ts\n */\nfunction publishPlaceOrderEvent(): void {\n  window.adobeDataLayer = window.adobeDataLayer || [];\n\n  /*global AdobeClientDataLayer */\n  /*eslint no-undef: \"error\"*/\n  window.adobeDataLayer.push((acdl: AdobeClientDataLayer) => {\n    const state = acdl.getState() || {};\n\n    acdl.push({\n      event: 'place-order',\n      eventInfo: {\n        ...state,\n      },\n    });\n  });\n}\n\n/**\n * \"completeCheckout\" is a Commerce event available when it's installed the\n * Data Connection extension. The data this event collects is sent to the Adobe\n * Experience Platform edge.\n *\n * This is a Storefront event that collects anonymized behavioral data from the\n * shoppers as they browse the site. The data this event collects can be used\n * to create promotions and campaigns targeted to a specific set of shoppers.\n * Storefront event data includes simple and configurable products only.\n *\n * \"completeCheckout\" is triggered when the shopper places an order.\n *\n * The code access directly the Adobe Client Data Layer (ACDL) package instead\n * of using the Adobe Commerce Events SDK package, because the ACDL reduces the\n * effort to instrument websites by providing a standardized method to expose\n * and access any kind of data for any script. It consists of a JavaScript\n * client-side event-driven data store that can be used on web pages:\n *\n * - to collect data about what the visitors experience on the web page\n * - to communicate this data to digital analytics and reporting servers\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @returns {void}\n *\n * Data Connection Events documentation @see https://experienceleague.adobe.com/docs/commerce-merchant-services/data-connection/event-forwarding/events.html?lang=en#completecheckout\n * Adobe Commerce Events SDK GitHub repo @see https://github.com/adobe/commerce-events\n * Adobe Client Data Layer documentation @see https://github.com/adobe/adobe-client-data-layer/wiki\n * Adobe Client Data Layer GitHub repo @see https://github.com/adobe/adobe-client-data-layer\n */\nexport function completeCheckout(orderId: string): void {\n  setContext(orderId);\n  publishPlaceOrderEvent();\n}\n","import { PlaceOrderMutation } from '@/checkout/__generated__/types';\nimport {\n  FetchError,\n  MissingCart,\n  UnexpectedError,\n} from '@/checkout/api/errors';\nimport { fetchGraphQl } from '@/checkout/api/fetch-graphql';\nimport { placeOrderMutation } from '@/checkout/api/placeOrder/graphql';\nimport { handleNetworkError } from '@/checkout/lib/network-error';\nimport { completeCheckout } from '@/checkout/utils/storefrontEvents';\nimport { events } from '@adobe/event-bus';\nimport { FetchQueryError } from '@adobe/fetch-graphql';\n\nfunction handleErrors(errors: FetchQueryError) {\n  const isFetchError = errors.every((error) => error.extensions?.category);\n\n  if (isFetchError) throw new FetchError(errors);\n\n  throw new UnexpectedError(errors[0].message);\n}\n\nexport const placeOrder = async (cartId: string) => {\n  if (!cartId) throw new MissingCart();\n\n  const { data, errors } = await fetchGraphQl<PlaceOrderMutation>(\n    placeOrderMutation,\n    {\n      variables: { cartId },\n    }\n  ).catch(handleNetworkError)\n\n  if (errors) handleErrors(errors);\n\n  const order = data.placeOrder!.orderV2;\n\n  completeCheckout(order!.number);\n\n  // Emit the order to the checkout/order event\n  events.emit('checkout/order', order); \n  // Reset the cart after the order is placed\n  events.emit('cart/reset', undefined); \n};\n"],"names":["isValidCustomAttribute","attribute","transformCustomAttributesV2","data","filter","map","code","value","transformCustomerAddress","street","Boolean","regionId","region","region_id","hasRegionId","id","String","firstName","firstname","lastName","lastname","company","undefined","city","postCode","postcode","vatId","vat_id","telephone","region_code","name","country","country_code","label","customAttributes","custom_attributesV2","transformCustomerAddresses","transformDefaultAddress","type","address","find","transformCustomer","addresses","email","defaultBillingAddress","defaultShippingAddress","getCart","cartId","dispatchApiCall","query","getCartQuery","getCustomerCartQuery","options","method","cache","variables","path","signalType","transformer","transformCart","getCustomerQuery","getCustomer","CART_STOCK_STATUS_FRAGMENT","getCartStockStatusQuery","getCustomerCartStockStatusQuery","isProductInStock","product","stock_status","ProductStockStatus","InStock","simpleStockChecker","item","configStockChecker","configurable_options","variants","selectedOptions","option","configurable_product_option_value_uid","selectedVariant","variant","attributes","every","includes","uid","variantProduct","bundleStockChecker","bundle_options","items","bundle","length","getStockChecker","isOutOfStock","__typename","getStockStatus","errors","fetchGraphQl","catch","handleNetworkError","FetchError","cartItems","cart","OutOfStock","placeOrderMutation","mapConfigurableOptions","result","key","push","optionLabel","valueLabel","mapCartItems","sku","price","quantity","cartItem","canApplyMsrp","formattedPrice","prices","currency","productId","productType","kind","canonicalUrl","url","mainImageUrl","image","src","ItemKind","Configurable","configurableOptions","buildShoppingCartContext","totalQty","hasItems","shoppingCartContext","subtotalExcludingTax","subtotal_excluding_tax","subtotalIncludingTax","subtotal_including_tax","totalQuantity","possibleOnepageCheckout","calculateTaxes","taxes","totalTaxAmount","reduce","total","tax","amount","buildShippingMethod","shippingMethod","carrier","shippingAmount","buildOrderContext","orderId","coupons","selectedPaymentMethod","shippingAddresses","hasAddresses","orderContext","appliedCouponCode","grandTotal","grand_total","orderType","otherTax","paymentMethodCode","paymentMethodName","title","payments","salesTax","applied_taxes","firstAddress","selectedShippingMethod","shipping","setContext","cartSignal","adobeDataLayer","window","publishPlaceOrderEvent","acdl","state","getState","event","eventInfo","completeCheckout","handleErrors","isFetchError","error","extensions","category","UnexpectedError","message","placeOrder","MissingCart","order","orderV2","number","emit"],"mappings":"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"}