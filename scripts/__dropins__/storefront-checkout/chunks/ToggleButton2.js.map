{"version":3,"file":"ToggleButton2.js","sources":["../../node_modules/@adobe/elsie/src/icons/Wallet.svg","../../src/components/PaymentMethods/PaymentMethodsSkeleton.tsx","../../src/components/PaymentMethods/PaymentMethods.tsx","../../src/containers/PaymentMethods/defaultHandlers.tsx","../../src/containers/PaymentMethods/PaymentMethods.tsx","../../src/components/ToggleButton/ToggleButton.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgWallet = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M17.93 14.8V18.75H5.97C4.75 18.75 3.75 17.97 3.75 17V6.5M3.75 6.5C3.75 5.53 4.74 4.75 5.97 4.75H15.94V8.25H5.97C4.75 8.25 3.75 7.47 3.75 6.5Z\", stroke: \"currentColor\", strokeWidth: 1, strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M19.35 11.64H14.04V14.81H19.35V11.64Z\", stroke: \"currentColor\", strokeWidth: 1, strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M17.9304 11.64V8.25H15.1504\", stroke: \"currentColor\", strokeWidth: 1, strokeLinecap: \"round\", strokeLinejoin: \"round\" }));\nexport default SvgWallet;\n","import { FunctionComponent } from 'preact';\nimport { Skeleton, SkeletonRow } from '@adobe/elsie/components';\n\nexport const PaymentMethodsSkeleton: FunctionComponent = () => {\n  return (\n    <Skeleton data-testid=\"payment-methods-skeleton\">\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"xlarge\" fullWidth={true} />\n      <SkeletonRow size=\"xlarge\" fullWidth={true} />\n    </Skeleton>\n  );\n};\n","import { Heading, ToggleButton } from '@/checkout/components';\nimport { PaymentMethodsSkeleton } from '@/checkout/components/PaymentMethods';\nimport '@/checkout/components/PaymentMethods/PaymentMethods.css';\nimport { PaymentMethod } from '@/checkout/data/models/payment-method';\nimport {\n  Divider,\n  Icon,\n  IllustratedMessage,\n  ProgressSpinner,\n} from '@adobe/elsie/components';\nimport { useText } from '@adobe/elsie/i18n';\nimport { Wallet } from '@adobe/elsie/icons';\nimport { classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nexport interface PaymentMethodsProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  paymentMethodContent?: VNode;\n  isLoading?: boolean;\n  onChange?: (value: string) => void;\n  options?: PaymentMethod[];\n  selection?: string;\n}\n\ninterface PaymentOptionProps {\n  code: string;\n  isLoading?: boolean;\n  isSelected: boolean;\n  onChange: (value: string) => void;\n  title: string;\n}\n\nconst PaymentOption: FunctionComponent<PaymentOptionProps> = ({\n  code,\n  isLoading,\n  isSelected,\n  onChange,\n  title,\n}) => {\n  return (\n    <ToggleButton\n      className=\"checkout-payment-methods__method\"\n      label={title}\n      name=\"payment-method\"\n      value={code}\n      selected={isSelected}\n      onChange={onChange}\n      radioButtonProps={{\n        'aria-busy': isLoading,\n      }}\n      // TODO: Add icon\n    />\n  );\n};\n\nexport const PaymentMethods: FunctionComponent<PaymentMethodsProps> = ({\n  className,\n  paymentMethodContent,\n  isLoading,\n  onChange = () => {},\n  options,\n  selection,\n}) => {\n  const dictionary = useText({\n    Title: 'Checkout.PaymentMethods.title',\n    EmptyState: 'Checkout.PaymentMethods.emptyState',\n  });\n\n  if (options === undefined) return <PaymentMethodsSkeleton />;\n\n  return (\n    <div className={classes(['checkout-payment-methods', className])}>\n      <Heading level={2} className=\"checkout-payment-methods__title\">\n        {dictionary.Title}\n      </Heading>\n\n      {!isLoading && options!.length === 0 && (\n        <IllustratedMessage\n          icon={<Icon source={Wallet} />}\n          message={<p>{dictionary.EmptyState}</p>}\n        />\n      )}\n\n      <div className={classes(['checkout-payment-methods__wrapper'])}>\n        {isLoading && (\n          <ProgressSpinner className=\"checkout-payment-methods__spinner\" />\n        )}\n\n        <div\n          className={classes([\n            'checkout-payment-methods__methods',\n            ['checkout-payment-methods--loading', isLoading],\n            ['checkout-payment-methods--full-width', options!.length % 2 !== 0],\n          ])}\n        >\n          {options?.map((method) => (\n            <PaymentOption\n              code={method.code}\n              key={method.code}\n              onChange={onChange}\n              isSelected={method.code === selection}\n              title={method.title}\n            />\n          ))}\n        </div>\n\n        {paymentMethodContent && (\n          <div className=\"checkout-payment-methods__content\">\n            {paymentMethodContent}\n          </div>\n        )}\n      </div>\n      <Divider variant=\"primary\" />\n    </div>\n  );\n};\n","import { SlotProps } from '@adobe/elsie/lib';\nimport { PaymentMethodContentSlotContext } from '.';\n\nexport interface PaymentMethodHandler {\n  render: SlotProps<PaymentMethodContentSlotContext>;\n}\n\nexport interface PaymentMethodHandlers {\n  [code: string]: PaymentMethodHandler;\n}\n\nexport const defaultHandlers: PaymentMethodHandlers = {\n  free: {\n    render: (context) => {\n      const $content = document.createElement('div');\n      $content.innerText = '';\n      context.replaceHTML($content);\n    },\n  },\n  checkmo: {\n    render: (context) => {\n      const $content = document.createElement('div');\n      $content.innerText = '';\n      context.replaceHTML($content);\n    },\n  },\n};\n","import { setPaymentMethod as setPaymentMethodOnCart } from '@/checkout/api';\nimport { PaymentMethods as PaymentMethodsComponent } from '@/checkout/components/PaymentMethods/PaymentMethods';\nimport {\n  PaymentMethodHandler,\n  defaultHandlers,\n} from '@/checkout/containers/PaymentMethods/defaultHandlers';\nimport { cartSignal } from '@/checkout/signals';\nimport { Container, Slot, SlotProps } from '@adobe/elsie/lib';\nimport {\n  HTMLAttributes,\n  useCallback,\n  useEffect,\n  useState,\n} from 'preact/compat';\n\nexport interface PaymentMethodSlotContext {\n  addPaymentMethodHandler: (\n    code: string,\n    handler: { render: SlotProps<PaymentMethodContentSlotContext> }\n  ) => void;\n  replaceHTML: (domElement: HTMLElement) => void;\n}\n\nexport interface PaymentMethodContentSlotContext {\n  cartId: string;\n  onPlaceOrder: (fn: () => Promise<void>) => void;\n  handleServerError: (error: any) => void;\n  replaceHTML: (domElement: HTMLElement) => void;\n}\n\nexport interface PaymentMethodsProps extends HTMLAttributes<HTMLDivElement> {\n  paymentMethodsSlot?: SlotProps<PaymentMethodSlotContext>;\n  onPlaceOrder: (fn: () => Promise<void>) => void;\n  handleServerError: (error: any) => void;\n  isShippingInfoRequired?: boolean;\n}\n\nfunction usePaymentMethods(props: PaymentMethodsProps) {\n  const {\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired,\n  } = props;\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<\n    string | undefined\n  >();\n  const [temporarySelectedPaymentMethod, setTemporarySelectedPaymentMethod] =\n    useState<string | undefined>();\n\n  const [paymentMethodHandlers, setPaymentMethodHandlers] =\n    useState(defaultHandlers);\n\n  const [isDefaultContentUsed, setIsDefaultContentUsed] = useState(true);\n\n  const { data: cartData } = cartSignal.value;\n  const cartId = cartData?.id ?? '';\n  const hasCartData = !!cartData;\n  const hasAddress = !!cartData?.shippingAddresses?.[0];\n  const availablePaymentMethods = cartData?.availablePaymentMethods;\n  const cartSelectedPaymentMethod = cartData?.selectedPaymentMethod;\n\n  const setAndSelectPaymentMethod = useCallback(\n    async (paymentMethod: string) => {\n      try {\n        setSelectedPaymentMethod(paymentMethod);\n\n        if (!hasAddress && isShippingInfoRequired) return;\n\n        if (paymentMethod === cartSelectedPaymentMethod?.code) return;\n\n        await setPaymentMethodOnCart({ cartId, paymentMethod });\n      } catch (error: any) {\n        console.error('setting payment method failed:', error);\n      }\n    },\n    [cartId, hasAddress, isShippingInfoRequired, cartSelectedPaymentMethod]\n  );\n\n  useEffect(() => {\n    if (!hasCartData) return;\n\n    if (cartSelectedPaymentMethod?.code) {\n      const selectedPaymentMethodIsAvailable = availablePaymentMethods?.some(\n        (method: any) => method.code === cartSelectedPaymentMethod.code\n      );\n\n      if (selectedPaymentMethodIsAvailable) {\n        // select the method from the backend\n        setSelectedPaymentMethod(cartSelectedPaymentMethod.code);\n      } else if (availablePaymentMethods?.length) {\n        // select the first available method\n        setAndSelectPaymentMethod(availablePaymentMethods[0]!.code);\n      } else {\n        setSelectedPaymentMethod(undefined);\n      }\n    } else {\n      // default to the temporarily selected one or the first one\n      availablePaymentMethods![0] &&\n        setAndSelectPaymentMethod(\n          temporarySelectedPaymentMethod || availablePaymentMethods![0].code\n        );\n    }\n  }, [\n    availablePaymentMethods,\n    hasCartData,\n    cartSelectedPaymentMethod,\n    setAndSelectPaymentMethod,\n    temporarySelectedPaymentMethod,\n  ]);\n\n  const onPaymentMethodChange = async (value: string) => {\n    await setAndSelectPaymentMethod(value);\n    if (!cartSelectedPaymentMethod?.code) {\n      setTemporarySelectedPaymentMethod(value);\n    }\n  };\n\n  const addPaymentMethodHandler = useCallback(\n    (code: string, handler: PaymentMethodHandler) => {\n      if (!code) {\n        console.warn(\n          'Payment method handler is ignored because it has no code'\n        );\n        return;\n      }\n\n      if (!handler) {\n        console.warn('Payment method handler is ignored because it is empty');\n        return;\n      }\n\n      setPaymentMethodHandlers((prevHandlers) => ({\n        ...prevHandlers,\n        [code]: handler,\n      }));\n    },\n    []\n  );\n\n  // Run the main payment method container slot callback\n  const mainSlotContent = paymentMethodsSlot ? (\n    <Slot\n      name=\"PaymentMethods\"\n      slot={paymentMethodsSlot}\n      context={{\n        addPaymentMethodHandler,\n        replaceHTML(domElement) {\n          this.replaceWith(domElement);\n          setIsDefaultContentUsed(false);\n        },\n      }}\n    />\n  ) : null;\n\n  const selectedPaymentMethodHandler = selectedPaymentMethod\n    ? paymentMethodHandlers[selectedPaymentMethod]\n    : null;\n\n  const paymentMethodContent = selectedPaymentMethodHandler ? (\n    <Slot\n      key={selectedPaymentMethodHandler}\n      name=\"PaymentMethodContent\"\n      slot={selectedPaymentMethodHandler.render}\n      context={{\n        cartId,\n        onPlaceOrder,\n        handleServerError,\n        replaceHTML(domElement) {\n          this.replaceWith(domElement);\n        },\n      }}\n    />\n  ) : undefined;\n\n  useEffect(() => {\n    // Content has been replaced but payment method handlers have been added\n    if (!isDefaultContentUsed && paymentMethodHandlers != defaultHandlers) {\n      console.warn(\n        'Payment method handlers you have added are ignored because the default content has been replaced'\n      );\n    }\n  }, [isDefaultContentUsed, paymentMethodHandlers]);\n\n  return {\n    availablePaymentMethods,\n    selectedPaymentMethod,\n    onPaymentMethodChange,\n    paymentMethodContent,\n    mainSlotContent,\n    isDefaultContentUsed,\n  };\n}\n\nexport const PaymentMethods: Container<PaymentMethodsProps> = (props) => {\n  const {\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired = true,\n  } = props;\n  const {\n    availablePaymentMethods,\n    selectedPaymentMethod,\n    onPaymentMethodChange,\n    paymentMethodContent,\n    mainSlotContent,\n    isDefaultContentUsed,\n  } = usePaymentMethods({\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired,\n  });\n\n  return (\n    <>\n      {mainSlotContent && (\n        // @ts-ignore\n        <mainSlotContent.type\n          ref={mainSlotContent.ref}\n          {...mainSlotContent.props}\n        />\n      )}\n      {isDefaultContentUsed && (\n        <PaymentMethodsComponent\n          options={availablePaymentMethods}\n          selection={selectedPaymentMethod}\n          onChange={onPaymentMethodChange}\n          paymentMethodContent={paymentMethodContent}\n          isLoading={cartSignal.value.pending}\n        />\n      )}\n    </>\n  );\n};\n","import { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/checkout/components/ToggleButton/ToggleButton.css';\nimport { RadioButton } from '@adobe/elsie/components';\n\nexport interface ToggleButtonProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange' | 'icon'> {\n  label: string;\n  name: string;\n  value: string;\n  selected: boolean;\n  onChange: (value: string) => void;\n  icon?:\n    | VNode<HTMLAttributes<SVGSVGElement>>\n    | VNode<HTMLAttributes<HTMLImageElement>>;\n  radioButtonProps?: Omit<\n    HTMLAttributes<HTMLInputElement>,\n    'size' | 'label' | 'name' | 'value' | 'checked' | 'disabled'\n  >;\n}\n\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = ({\n  label,\n  name,\n  value,\n  icon,\n  selected,\n  onChange,\n  className,\n  children,\n  radioButtonProps,\n  ...props\n}) => {\n  return (\n    <div\n      className={classes([\n        'checkout-toggle-button',\n        className,\n        ['checkout-toggle-button__selected', selected],\n      ])}\n      {...props}\n    >\n      <label className=\"checkout-toggle-button__actionButton\">\n        <RadioButton\n          {...radioButtonProps}\n          label=\"\"\n          name={name}\n          value={value}\n          checked={selected}\n          onChange={() => onChange(value)}\n          aria-label={label}\n          className={classes([\n            className,\n            'checkout-toggle-button__radioButton',\n          ])}\n        />\n\n        <div className=\"checkout-toggle-button__content\">\n          {icon && (\n            <icon.type\n              {...icon?.props}\n              className=\"checkout-toggle-button__icon\"\n            />\n          )}\n\n          {label}\n        </div>\n      </label>\n    </div>\n  );\n};\n"],"names":["SvgWallet","props","React","PaymentMethodsSkeleton","_jsxs","Skeleton","children","_jsx","SkeletonRow","variant","size","fullWidth","PaymentOption","code","isLoading","isSelected","onChange","title","ToggleButton","className","label","name","value","selected","radioButtonProps","PaymentMethods","paymentMethodContent","options","selection","dictionary","useText","Title","EmptyState","undefined","classes","Heading","level","length","IllustratedMessage","icon","Icon","source","Wallet","message","ProgressSpinner","map","method","Divider","defaultHandlers","free","render","context","$content","document","createElement","innerText","replaceHTML","checkmo","usePaymentMethods","onPlaceOrder","handleServerError","paymentMethodsSlot","isShippingInfoRequired","selectedPaymentMethod","setSelectedPaymentMethod","useState","temporarySelectedPaymentMethod","setTemporarySelectedPaymentMethod","paymentMethodHandlers","setPaymentMethodHandlers","isDefaultContentUsed","setIsDefaultContentUsed","data","cartData","cartSignal","cartId","id","hasCartData","hasAddress","shippingAddresses","availablePaymentMethods","cartSelectedPaymentMethod","setAndSelectPaymentMethod","useCallback","paymentMethod","setPaymentMethodOnCart","error","useEffect","some","onPaymentMethodChange","addPaymentMethodHandler","handler","console","warn","prevHandlers","mainSlotContent","Slot","slot","domElement","replaceWith","selectedPaymentMethodHandler","_Fragment","type","ref","PaymentMethodsComponent","pending","RadioButton","checked"],"mappings":"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","x_google_ignoreList":[0]}