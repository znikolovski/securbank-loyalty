{"version":3,"file":"setShippingAddress.js","sources":["../../src/utils/parseRegionId/parseRegionId.ts","../../src/api/setShippingAddress/graphql/setShippingAddress.graphql.ts","../../src/api/setShippingAddress/setShippingAddress.ts"],"sourcesContent":["const NUMERIC_ID_REGEX = /^\\d+$/;\n\nexport const parseRegionId = (regionId: string) =>  {\n  const isId = NUMERIC_ID_REGEX.test(regionId);\n  if (!isId) return;\n  return parseInt(regionId, 10);\n}\n","import {\n  CART_DATA_FRAGMENT,\n  CART_SUMMARY_FRAGMENT,\n} from '@/checkout/api/getCart/graphql/getCart.graphql';\n\nexport const setShippingAddressMutation = /* GraphQL */ `\n  mutation setShippingAddress($cartId: String!, $address: CartAddressInput!) {\n    setShippingAddressesOnCart(\n      input: { cart_id: $cartId, shipping_addresses: [{ address: $address }] }\n    ) {\n      cart {\n        id\n        ...CartData\n        ...CartSummaryItems\n      }\n    }\n  }\n  ${CART_DATA_FRAGMENT}\n  ${CART_SUMMARY_FRAGMENT}\n`;\n","import {\n  MULTILINE_CUSTOM_ATTR_SPLIT,\n  MULTILINE_SUFFIX,\n} from '@/checkout/components/AddressForm/constants';\nimport { getMultilineValues, parseRegionId } from '@/checkout/utils';\nimport { setShippingAddressMutation } from './graphql/setShippingAddress.graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { transformCart } from '@/checkout/data/transforms';\nimport { AddressFormFieldCode } from '@/checkout/data/models';\n\nexport const STANDARD_ATTRIBUTES = [\n  'city',\n  'company',\n  'country_code',\n  'firstname',\n  'lastname',\n  'postcode',\n  'region',\n  'region_id',\n  'save_in_address_book',\n  'street',\n  'telephone',\n  'vat_id',\n];\n\nexport interface AddressInput {\n  city: string;\n  company?: string;\n  country_code: string;\n  custom_attributes?: {\n    attribute_code: string;\n    value?: string;\n    selected_options?: { uid: string; value: string }[];\n  }[];\n  firstname: string;\n  lastname: string;\n  postcode?: string;\n  region?: string;\n  region_id?: number;\n  save_in_address_book?: boolean;\n  street: string[];\n  telephone?: string;\n  vat_id?: string;\n}\n\nexport interface setShippingAddressParams {\n  cartId: string;\n  address: AddressInput;\n  signal?: AbortSignal;\n}\n\n/*\n  Region and Region_id are mutually exclusive.\n  If region_id is set, region is ignored.\n\n  Region could be required for some countries, but not for others. It is required if the country_id is in\n  the store configuration \"countries_with_required_region\"\n\n  If region is optional and the store configuration \"display_state_if_optional\" is set to true, the region field\n  will be displayed as a text input if there is no country.available_regions is empty. If it is set to false,\n  the region field will be hidden.\n*/\n\nexport const prepareAddress = (formFields: Record<string, any>) => {\n  const address: AddressInput = {\n    city: formFields[AddressFormFieldCode.City],\n    company: formFields[AddressFormFieldCode.Company],\n    country_code: formFields[AddressFormFieldCode.Country],\n    firstname: formFields[AddressFormFieldCode.FirstName],\n    lastname: formFields[AddressFormFieldCode.LastName],\n    postcode: formFields[AddressFormFieldCode.PostCode],\n    save_in_address_book: true,\n    street: getMultilineValues(AddressFormFieldCode.Street, formFields),\n    telephone: formFields[AddressFormFieldCode.Telephone],\n    vat_id: formFields[AddressFormFieldCode.Vat],\n  };\n\n  const region = formFields[AddressFormFieldCode.Region];\n  const regionId = parseRegionId(region);\n\n  if (!regionId) {\n    address.region = region;\n  } else {\n    address.region_id = regionId;\n  }\n\n  const custom_attributes = Object.keys(formFields)\n    .filter((key) => !key.startsWith('street'))\n    .filter((key) => !STANDARD_ATTRIBUTES.includes(key))\n    .filter((key) => key !== 'country_id')\n    .map((key) => {\n      const [code, multiline] = key.split(MULTILINE_SUFFIX);\n      if (!multiline) return { attribute_code: code, value: formFields[key] };\n      const value = getMultilineValues(code, formFields).join(\n        MULTILINE_CUSTOM_ATTR_SPLIT\n      );\n      return { attribute_code: code, value };\n    });\n\n  // it is possible to have duplicated multiline custom attributes\n  const without_duplicates = custom_attributes.filter(\n    (item, index, self) =>\n      index === self.findIndex((t) => t.attribute_code === item.attribute_code)\n  );\n\n  if (without_duplicates.length > 0) {\n    address.custom_attributes = without_duplicates;\n  }\n\n  return address;\n};\n\nexport const setShippingAddress = async ({\n  signal,\n  cartId,\n  address,\n}: setShippingAddressParams) => {\n  return await dispatchApiCall({\n    type: 'mutation',\n    query: setShippingAddressMutation,\n    options: { signal, variables: { cartId, address } },\n    path: 'setShippingAddressesOnCart.cart',\n    signalType: 'cart',\n    transformer: transformCart,\n  });\n};\n"],"names":["NUMERIC_ID_REGEX","parseRegionId","regionId","test","parseInt","setShippingAddressMutation","CART_DATA_FRAGMENT","CART_SUMMARY_FRAGMENT","STANDARD_ATTRIBUTES","prepareAddress","formFields","address","city","AddressFormFieldCode","City","company","Company","country_code","Country","firstname","FirstName","lastname","LastName","postcode","PostCode","save_in_address_book","street","getMultilineValues","Street","telephone","Telephone","vat_id","Vat","region","Region","region_id","without_duplicates","Object","keys","filter","key","startsWith","includes","map","code","multiline","split","MULTILINE_SUFFIX","attribute_code","value","join","MULTILINE_CUSTOM_ATTR_SPLIT","item","index","self","findIndex","t","length","custom_attributes","setShippingAddress","signal","cartId","dispatchApiCall","type","query","options","variables","path","signalType","transformer","transformCart"],"mappings":"4OAAA,MAAMA,EAAmB,QAEZC,EAAiBC,GAAsB,CAElD,GADaF,EAAiBG,KAAKD,CAAQ,EAEpCE,OAAAA,SAASF,EAAU,EAAE,CAC9B,ECDaG,EAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYpDC,CAAkB;AAAA,IAClBC,CAAqB;AAAA,ECRZC,EAAsB,CACjC,OACA,UACA,eACA,YACA,WACA,WACA,SACA,YACA,uBACA,SACA,YACA,QAAQ,EAyCGC,EAAkBC,GAAoC,CACjE,MAAMC,EAAwB,CAC5BC,KAAMF,EAAWG,EAAqBC,IAAI,EAC1CC,QAASL,EAAWG,EAAqBG,OAAO,EAChDC,aAAcP,EAAWG,EAAqBK,OAAO,EACrDC,UAAWT,EAAWG,EAAqBO,SAAS,EACpDC,SAAUX,EAAWG,EAAqBS,QAAQ,EAClDC,SAAUb,EAAWG,EAAqBW,QAAQ,EAClDC,qBAAsB,GACtBC,OAAQC,EAAmBd,EAAqBe,OAAQlB,CAAU,EAClEmB,UAAWnB,EAAWG,EAAqBiB,SAAS,EACpDC,OAAQrB,EAAWG,EAAqBmB,GAAG,CAAA,EAGvCC,EAASvB,EAAWG,EAAqBqB,MAAM,EAC/ChC,EAAWD,EAAcgC,CAAM,EAEhC/B,EAGHS,EAAQwB,UAAYjC,EAFpBS,EAAQsB,OAASA,EAmBnB,MAAMG,EAdoBC,OAAOC,KAAK5B,CAAU,EAC7C6B,OAAQC,GAAQ,CAACA,EAAIC,WAAW,QAAQ,CAAC,EACzCF,OAAQC,GAAQ,CAAChC,EAAoBkC,SAASF,CAAG,CAAC,EAClDD,OAAQC,GAAQA,IAAQ,YAAY,EACpCG,IAAaH,GAAA,CACZ,KAAM,CAACI,EAAMC,CAAS,EAAIL,EAAIM,MAAMC,CAAgB,EACpD,GAAI,CAACF,EAAkB,MAAA,CAAEG,eAAgBJ,EAAMK,MAAOvC,EAAW8B,CAAG,CAAA,EACpE,MAAMS,EAAQtB,EAAmBiB,EAAMlC,CAAU,EAAEwC,KACjDC,CACF,EACO,MAAA,CAAEH,eAAgBJ,EAAMK,MAAAA,CAAAA,CAAM,CACtC,EAG0CV,OAC3C,CAACa,EAAMC,EAAOC,IACZD,IAAUC,EAAKC,UAAiBC,GAAAA,EAAER,iBAAmBI,EAAKJ,cAAc,CAC5E,EAEIZ,OAAAA,EAAmBqB,OAAS,IAC9B9C,EAAQ+C,kBAAoBtB,GAGvBzB,CACT,EAEagD,EAAqB,MAAO,CACvCC,OAAAA,EACAC,OAAAA,EACAlD,QAAAA,CACwB,IACjB,MAAMmD,EAAgB,CAC3BC,KAAM,WACNC,MAAO3D,EACP4D,QAAS,CAAEL,OAAAA,EAAQM,UAAW,CAAEL,OAAAA,EAAQlD,QAAAA,CAAQ,CAAE,EAClDwD,KAAM,kCACNC,WAAY,OACZC,YAAaC,CAAAA,CACd"}