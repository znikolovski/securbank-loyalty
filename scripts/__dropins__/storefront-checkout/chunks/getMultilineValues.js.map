{"version":3,"file":"getMultilineValues.js","sources":["../../src/api/estimateShippingMethods/graphql/estimateShippingMethods.graphql.ts","../../src/data/models/address-form-fields.ts","../../src/data/transforms/transform-regions.ts","../../src/api/estimateShippingMethods/estimateShippingMethods.ts","../../src/api/getRegions/graphql/getRegions.graphql.ts","../../src/api/getRegions/getRegions.ts","../../src/components/AddressForm/constants.ts","../../src/utils/getMultilineValues/getMultilineValues.ts"],"sourcesContent":["export const estimateShippingMethodsMutation = /* GraphQL */ `\nmutation estimateShippingMethods(\n\t$cartId: String!\n  $address: EstimateAddressInput!\n) {\n\testimateShippingMethods(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\taddress: $address\n\t\t}\n\t) {\n\t\tcarrier_title\n\t\tcarrier_code\n\t\tmethod_title\n\t\tmethod_code\n\t\tavailable\n\t\tamount {\n\t\t\tcurrency\n\t\t\tvalue\n\t\t}\n\t\tprice_excl_tax {\n\t\t\tcurrency\n\t\t\tvalue\n\t\t}\n\t\tprice_incl_tax {\n\t\t\tcurrency\n\t\t\tvalue\n\t\t}\n\t\terror_message\n\t}\n}\n`;\n","import {\n  AttributeFrontendInputEnum,\n  ValidationRuleEnum,\n} from '@/checkout/__generated__/types';\nimport { PickerOption } from '@adobe/elsie/src/components';\n\ntype AddressFormFieldRule = {\n  name: ValidationRuleEnum;\n  value: string;\n};\n\ntype AddressFormField = {\n  code: string;\n  defaultValue?: string;\n  frontendInput?: AttributeFrontendInputEnum;\n  isDisabled: boolean;\n  isRequired: boolean;\n  label?: string;\n  multilineCount?: number;\n  options: PickerOption[];\n  sortOrder?: number;\n  validateRules?: AddressFormFieldRule[];\n};\n\ntype FieldEvents = {\n  handleSelect?: (event: Event) => void;\n  onBlur: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n};\n\ntype FieldValues = {\n  error: string | string[];\n  value: string | string[];\n};\n\ntype AddressFormElement = AddressFormField & FieldEvents & FieldValues;\n\nenum AddressFormType {\n  SHIPPING = 'shipping_addresses',\n  BILLING = 'billing_address',\n}\n\nenum AddressFormFieldCode {\n  City = 'city',\n  Company = 'company',\n  Country = 'country_id',\n  FirstName = 'firstname',\n  LastName = 'lastname',\n  PostCode = 'postcode',\n  Region = 'region',\n  RegionId = 'region_id',\n  SaveInAddressBook = 'save_in_address_book',\n  Street = 'street',\n  Telephone = 'telephone',\n  Vat = 'vat_id',\n}\n\ntype AddressFormValues = Record<string, string>;\ntype AddressFormErrors = Record<string, string>;\n\nexport {\n  AddressFormErrors,\n  AddressFormField,\n  AddressFormFieldCode,\n  AddressFormType,\n  AddressFormValues,\n  AddressFormElement,\n};\n","import { GetRegionsQuery } from '@/checkout/__generated__/types';\nimport { Region as RegionModel } from '@/checkout/data/models/region';\n\ntype RegionsCountry = NonNullable<GetRegionsQuery['country']>;\ntype AvailableRegions = RegionsCountry['available_regions'];\ntype NonNullableRegions = NonNullable<AvailableRegions>;\ntype AvailableRegion = NonNullableRegions[number];\ntype NonNullableAvailableRegion = NonNullable<AvailableRegion>;\ntype ValidatedAvailableRegion = {\n  code: NonNullable<NonNullableAvailableRegion['code']>;\n  id: NonNullable<NonNullableAvailableRegion['id']>;\n  name: NonNullable<NonNullableAvailableRegion['name']>;\n};\n\nconst isValid = (region: AvailableRegion): boolean => {\n  if (!region) return false;\n  return !!region.id && !!region.code && !!region.name;\n};\n\nconst transformRegions = (\n  data: RegionsCountry['available_regions']\n): RegionModel[] | undefined => {\n  if (!data) return;\n\n  return data.filter(isValid).map((region) => {\n    const { id, code, name } = region as ValidatedAvailableRegion;\n    return { id, code, name };\n  });\n};\n\nexport { AvailableRegions, transformRegions };\n","import { MissingCart, MissingCountry } from '@/checkout/api';\nimport { estimateShippingMethodsMutation } from '@/checkout/api/estimateShippingMethods/graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { ShippingMethod } from '@/checkout/data/models';\nimport { transformShippingMethods } from '@/checkout/data/transforms';\n\nexport interface ShippingEstimationCriteria {\n  country_code: string;\n  region_name?: string;\n  region_id?: string | number;\n  zip?: string;\n}\n\nexport type EstimateShippingInput = {\n  cartId: string;\n  criteria: ShippingEstimationCriteria;\n};\n\nexport const estimateShippingMethods = async (\n  input: EstimateShippingInput\n): Promise<ShippingMethod[] | undefined> => {\n  const { cartId, criteria } = input || {};\n  const { country_code, region_id, region_name, zip } =\n    criteria || {};\n\n  if (!cartId) throw new MissingCart();\n  if (!country_code) throw new MissingCountry();\n  \n  const regionId = (typeof region_id === 'string') ? parseInt(region_id, 10) : region_id;\n  const region = (region_id || region_name) ? {\n    ...(regionId && { region_id: regionId }),\n    ...(region_name && { region_code: region_name }),\n  } : undefined;\n\n  const address = {\n    country_code,\n    ...(zip && { postcode: zip }),\n    ...(region && { region })\n  };\n    \n  return await dispatchApiCall({\n    type: 'mutation',\n    query: estimateShippingMethodsMutation,\n    options: { variables: { cartId, address } },\n    path: 'estimateShippingMethods',\n    signalType: 'estimateShippingMethods',\n    transformer: transformShippingMethods,\n  });\n};\n","export const getRegionsQuery = /* GraphQL */`\nquery getRegions($countryCode: String!) {\n    country(id: $countryCode) {\n        id\n        available_regions {\n            id\n            code\n            name\n        }\n    }\n}`;","import { regionsSignal } from '@/checkout/signals';\nimport { getRegionsQuery } from './graphql/getRegions.graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { transformRegions } from '@/checkout/data/transforms/transform-regions';\nimport { Region as RegionModel } from '@/checkout/data/models/region';\nimport { AddressFormType } from '@/checkout/data/models';\n\nexport const getRegions = async (\n  countryCode: string,\n  addressType: AddressFormType\n): Promise<RegionModel[] | undefined> => {\n  regionsSignal.value.addressType = addressType;\n\n  return dispatchApiCall({\n    type: 'query',\n    query: getRegionsQuery,\n    options: { variables: { countryCode } },\n    path: 'country.available_regions',\n    signalType: 'regions',\n    transformer: transformRegions,\n  });\n};\n","export const MULTILINE_SUFFIX = '-';\nexport const MULTILINE_CUSTOM_ATTR_SPLIT = '\\n';\nexport const DEBOUNCE_TIME = 2000;\n","import { MULTILINE_SUFFIX } from '@/checkout/components/AddressForm/constants';\n\nconst getMultilineValues = (code: string, records: Record<string, string>) => {\n  return Object.keys(records)\n    .filter((key) => key.startsWith(code))\n    .sort(\n      (a, b) =>\n        parseInt(a.replace(`${code}${MULTILINE_SUFFIX}`, ''), 10) -\n        parseInt(b.replace(`${code}${MULTILINE_SUFFIX}`, ''), 10)\n    )\n    .map((key) => records[key]);\n};\n\nexport { getMultilineValues };\n"],"names":["estimateShippingMethodsMutation","AddressFormType","SHIPPING","BILLING","AddressFormFieldCode","City","Company","Country","FirstName","LastName","PostCode","Region","RegionId","SaveInAddressBook","Street","Telephone","Vat","isValid","region","id","code","name","transformRegions","data","filter","map","estimateShippingMethods","input","cartId","criteria","country_code","region_id","region_name","zip","MissingCart","MissingCountry","regionId","parseInt","region_code","undefined","address","postcode","dispatchApiCall","type","query","options","variables","path","signalType","transformer","transformShippingMethods","getRegionsQuery","getRegions","countryCode","addressType","regionsSignal","value","MULTILINE_SUFFIX","MULTILINE_CUSTOM_ATTR_SPLIT","DEBOUNCE_TIME","getMultilineValues","records","Object","keys","key","startsWith","sort","a","b","replace"],"mappings":"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"}