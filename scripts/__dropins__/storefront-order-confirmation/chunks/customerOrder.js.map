{"version":3,"file":"customerOrder.js","sources":["../../src/api/errors/errors.ts","../../src/api/fetch-graphql/fetch-graphql.ts","../../src/api/guestOrder/graphql/guestOrder.graphql.ts","../../src/api/guestOrder/guestOrder.ts","../../src/api/guestOrderByToken/graphql/guestOrderByToken.graphql.ts","../../src/api/guestOrderByToken/guestOrderByToken.ts","../../src/api/customerOrder/graphql/customerOrder.graphql.ts","../../src/api/customerOrder/customerOrder.ts"],"sourcesContent":["import { FetchQueryError } from '@adobe/fetch-graphql';\n\nexport class FetchError extends Error {\n  constructor(reasons: FetchQueryError) {\n    super(reasons.map((e: any) => e.message).join(' '));\n    this.name = 'FetchError';\n  }\n}\n\nexport class MissingArgument extends Error {\n  constructor(argument: string) {\n    super(`Missing argument: ${argument}`);\n  }\n}\n\nexport class OrderNotFound extends Error {\n  constructor() {\n    super('Order not found');\n  }\n}\n","import { FetchGraphQL } from '@adobe/fetch-graphql';\n\nexport const {\n  setEndpoint,\n  setFetchGraphQlHeader,\n  removeFetchGraphQlHeader,\n  setFetchGraphQlHeaders,\n  fetchGraphQl,\n  getConfig,\n} = new FetchGraphQL().getMethods();\n","export const GUEST_ORDER_FRAGMENT = /* GraphQL */ `\n  fragment guestOrderData on CustomerOrder {\n    number\n    status\n    email\n    shipping_method\n    is_virtual\n    payment_methods {\n      name\n      type\n    }\n    total {\n      subtotal {\n        currency\n        value\n      }\n      total_tax {\n        currency\n        value\n      }\n      total_shipping {\n        currency\n        value\n      }\n      grand_total {\n        currency\n        value\n      }\n    }\n    billing_address {\n      firstname\n      middlename\n      lastname\n      street\n      city\n      postcode\n      telephone\n      country_code\n      region\n      region_id\n      company\n    }\n    shipping_address {\n      firstname\n      middlename\n      lastname\n      street\n      city\n      postcode\n      telephone\n      country_code\n      region\n      region_id\n      company\n    }\n    items {\n      __typename\n      id\n      quantity_ordered\n      product_sale_price {\n        value\n        currency\n      }\n      product {\n        name\n        sku\n        thumbnail {\n          label\n          url\n        }\n        price_range {\n          maximum_price {\n            regular_price {\n              currency\n              value\n            }\n          }\n        }\n      }\n      selected_options {\n        label\n        value\n      }\n\n      ... on GiftCardOrderItem {\n        gift_card {\n          recipient_name\n          recipient_email\n          sender_name\n          sender_email\n          message\n        }\n      }\n    }\n  }\n`;\n\nexport const guestOrderQuery = /* GraphQL */ `\n  query guestOrder($number: String!, $email: String!, $postcode: String!) {\n    guestOrder(input: { number: $number, email: $email, postcode: $postcode }) {\n      ...guestOrderData\n    }\n  }\n  ${GUEST_ORDER_FRAGMENT}\n`;\n","import { fetchGraphQl } from '@/order-confirmation/api';\nimport {\n  FetchError,\n  OrderNotFound,\n} from '@/order-confirmation/api/errors';\nimport { guestOrderQuery } from '@/order-confirmation/api/guestOrder/graphql/guestOrder.graphql';\nimport { GuestOrderQuery } from '@/order-confirmation/__generated__/types';\n\n\nexport type GuestOrderInput = {\n  email: string;\n  number: string;\n  postcode: string;\n};\n\nexport const guestOrder = async (input: GuestOrderInput) => {\n  const { data, errors } = await fetchGraphQl<GuestOrderQuery>(\n    guestOrderQuery,\n    {\n      variables: {  ...input },\n    },\n  );\n\n  if (errors) throw new FetchError(errors);\n\n  const order = data?.guestOrder;\n\n  if (!order) throw new OrderNotFound();\n\n  return order;\n};","import { GUEST_ORDER_FRAGMENT } from '@/order-confirmation/api/guestOrder/graphql/guestOrder.graphql';\nexport const guestOrderByTokenQuery = /* GraphQL */ `\n  query guestOrderByToken($token: String!) {\n    guestOrderByToken(input: {token: $token}) {\n      ...guestOrderData\n    }\n  }\n  ${GUEST_ORDER_FRAGMENT}\n`;\n","import { fetchGraphQl } from '@/order-confirmation/api';\nimport { FetchError, OrderNotFound } from '@/order-confirmation/api/errors';\nimport { guestOrderByTokenQuery } from '@/order-confirmation/api/guestOrderByToken/graphql/guestOrderByToken.graphql';\nimport { GuestOrderByTokenQuery } from '@/order-confirmation/__generated__/types';\n\nexport const guestOrderByToken = async (token: string) => {\n  const { data, errors } = await fetchGraphQl<GuestOrderByTokenQuery>(\n    guestOrderByTokenQuery,\n    {\n      variables: { token },\n    }\n  );\n\n  if (errors) throw new FetchError(errors);\n\n  const order = data?.guestOrderByToken;\n  const hasOrder = !!order;\n\n  if (!hasOrder) throw new OrderNotFound();\n\n  return order;\n};\n","import { GUEST_ORDER_FRAGMENT } from '@/order-confirmation/api/guestOrder/graphql';\n\nexport const customerOrderQuery = /* GraphQL */ `\n  query customerOrder($number: String!) {\n    customer {\n      orders(filter: { number: { eq: $number } }) {\n        total_count\n        items {\n          ...guestOrderData\n        }\n      }\n    }\n  }\n  ${GUEST_ORDER_FRAGMENT}\n`;\n","import { fetchGraphQl } from '@/order-confirmation/api';\nimport { FetchError, OrderNotFound } from '@/order-confirmation/api/errors';\nimport { customerOrderQuery } from '@/order-confirmation/api/customerOrder/graphql/customerOrder.graphql';\nimport { CustomerOrderQuery } from '@/order-confirmation/__generated__/types';\n\nexport const customerOrder = async (number: string) => {\n  const { data, errors } = await fetchGraphQl<CustomerOrderQuery>(\n    customerOrderQuery,\n    {\n      variables: { number },\n    }\n  );\n\n  if (errors) throw new FetchError(errors);\n\n  const order = data?.customer?.orders?.items?.[0];\n\n  if (!order) throw new OrderNotFound();\n\n  return order;\n};\n"],"names":["FetchError","Error","constructor","reasons","map","e","message","join","name","MissingArgument","argument","OrderNotFound","setEndpoint","setFetchGraphQlHeader","removeFetchGraphQlHeader","setFetchGraphQlHeaders","fetchGraphQl","getConfig","FetchGraphQL","getMethods","GUEST_ORDER_FRAGMENT","guestOrderQuery","guestOrder","input","data","errors","variables","order","guestOrderByTokenQuery","guestOrderByToken","token","customerOrderQuery","customerOrder","number","customer","orders","items"],"mappings":"+DAEO,MAAMA,UAAmBC,KAAM,CACpCC,YAAYC,EAA0B,CAC9BA,MAAAA,EAAQC,IAAKC,GAAWA,EAAEC,OAAO,EAAEC,KAAK,GAAG,CAAC,EAClD,KAAKC,KAAO,YACd,CACF,CAEO,MAAMC,UAAwBR,KAAM,CACzCC,YAAYQ,EAAkB,CACtB,MAAA,qBAAqBA,CAAQ,EAAE,CACvC,CACF,CAEO,MAAMC,UAAsBV,KAAM,CACvCC,aAAc,CACZ,MAAM,iBAAiB,CACzB,CACF,CCjBa,KAAA,CACXU,YAAAA,EACAC,sBAAAA,EACAC,yBAAAA,EACAC,uBAAAA,EACAC,aAAAA,EACAC,UAAAA,CACF,EAAI,IAAIC,EAAa,EAAEC,WAAW,ECTrBC,EAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiGrCC,EAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMzCD,CAAoB;AAAA,ECxFXE,EAAa,MAAOC,GAA2B,CACpD,KAAA,CAAEC,KAAAA,EAAMC,OAAAA,CAAAA,EAAW,MAAMT,EAC7BK,EACA,CACEK,UAAW,CAAG,GAAGH,CAAM,CAAA,CAE3B,EAEIE,GAAAA,EAAc,MAAA,IAAIzB,EAAWyB,CAAM,EAEvC,MAAME,EAAQH,GAAAA,YAAAA,EAAMF,WAEpB,GAAI,CAACK,EAAO,MAAM,IAAIhB,EAEfgB,OAAAA,CACT,EC7BaC,EAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMhDR,CAAoB;AAAA,ECFXS,EAAoB,MAAOC,GAAkB,CAClD,KAAA,CAAEN,KAAAA,EAAMC,OAAAA,CAAAA,EAAW,MAAMT,EAC7BY,EACA,CACEF,UAAW,CAAEI,MAAAA,CAAM,CAAA,CAEvB,EAEIL,GAAAA,EAAc,MAAA,IAAIzB,EAAWyB,CAAM,EAEvC,MAAME,EAAQH,GAAAA,YAAAA,EAAMK,kBAGpB,GAAI,CAFa,CAAC,CAACF,EAEJ,MAAM,IAAIhB,EAElBgB,OAAAA,CACT,ECnBaI,EAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAW5CX,CAAoB;AAAA,ECRXY,EAAgB,MAAOC,GAAmB,WAC/C,KAAA,CAAET,KAAAA,EAAMC,OAAAA,CAAAA,EAAW,MAAMT,EAC7Be,EACA,CACEL,UAAW,CAAEO,OAAAA,CAAO,CAAA,CAExB,EAEIR,GAAAA,EAAc,MAAA,IAAIzB,EAAWyB,CAAM,EAEvC,MAAME,GAAQH,GAAAA,GAAAA,EAAAA,GAAAA,YAAAA,EAAMU,WAANV,YAAAA,EAAgBW,SAAhBX,YAAAA,EAAwBY,QAAxBZ,YAAAA,EAAgC,GAE9C,GAAI,CAACG,EAAO,MAAM,IAAIhB,EAEfgB,OAAAA,CACT"}