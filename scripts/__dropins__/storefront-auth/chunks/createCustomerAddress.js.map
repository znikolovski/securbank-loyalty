{"version":3,"file":"createCustomerAddress.js","sources":["../../src/api/createCustomer/graphql/createCustomer.graphql.ts","../../src/api/createCustomer/graphql/createCustomerV2.graphql.ts","../../src/api/createCustomer/createCustomer.ts","../../src/api/getAttributesForm/graphql/getAttributesForm.graphql.ts","../../src/api/getAttributesForm/getAttributesForm.ts","../../src/api/createCustomerAddress/graphql/createCustomerAddress.graphql.ts","../../src/api/createCustomerAddress/createCustomerAddress.ts"],"sourcesContent":["export const CREATE_CUSTOMER = `\n  mutation CREATE_CUSTOMER($input: CustomerInput!) {\n    createCustomer(input: $input) {\n      customer {\n        firstname\n        lastname\n        email\n        is_subscribed\n      }\n    }\n  }\n`;\n","export const CREATE_CUSTOMER_V2 = `\n  mutation CREATE_CUSTOMER_V2($input: CustomerCreateInput!) {\n    createCustomerV2(input: $input) {\n      customer {\n        firstname\n        lastname\n        email\n        is_subscribed\n      }\n    }\n  }\n`;\n","import { CreateCustomerDataResponse, Customer } from '@/auth/types';\nimport { fetchGraphQl } from '../fetch-graphql';\nimport { CREATE_CUSTOMER } from './graphql/createCustomer.graphql';\nimport { CREATE_CUSTOMER_V2 } from './graphql/createCustomerV2.graphql';\nimport { handleNetworkError } from '@/auth/lib/network-error';\n\nexport const createCustomer = async (\n  forms: Customer,\n  apiVersion2: boolean\n): Promise<CreateCustomerDataResponse> => {\n  const response = await fetchGraphQl(\n    apiVersion2 ? CREATE_CUSTOMER_V2 : CREATE_CUSTOMER,\n    {\n      method: 'POST',\n      variables: {\n        input: {\n          ...forms,\n        },\n      },\n    }\n  ).catch(handleNetworkError);\n\n  return response;\n};\n","export const GET_ATTRIBUTES_FORM = `\n  query GET_ATTRIBUTES_FORM($formCode: String!) {\n    attributesForm(formCode: $formCode) {\n      items {\n        code\n        default_value\n        entity_type\n        frontend_class\n        frontend_input\n        is_required\n        is_unique\n        label\n        options {\n          is_default\n          label\n          value\n        }\n      }\n      errors {\n        type\n        message\n      }\n    }\n  }\n`;\n","import { fetchGraphQl } from '../fetch-graphql';\nimport { GET_ATTRIBUTES_FORM } from './graphql/getAttributesForm.graphql';\nimport { handleNetworkError } from '@/auth/lib/network-error';\nimport { transformAttributesForm } from '@/auth/data/transforms';\nimport { handleFetchError } from '@/auth/lib/fetch-error';\nimport { AttributesFormModel } from '@/auth/data/models';\n\nexport const getAttributesForm = async (\n  formCode: string\n): Promise<AttributesFormModel> => {\n  return await fetchGraphQl(GET_ATTRIBUTES_FORM.replace(/\\s+/g, ' ').trim(), {\n    method: 'GET',\n    cache: 'force-cache',\n    variables: { formCode },\n  })\n    .then((response) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      return transformAttributesForm(response);\n    })\n    .catch(handleNetworkError);\n};\n","export const CREATE_CUSTOMER_ADDRESS = `\n  mutation CREATE_CUSTOMER_ADDRESS($input: CustomerAddressInput!) {\n    createCustomerAddress(input:$input) {\n      firstname\n   }\n  }\n`;\n","import { AddressFormProps, CreateCustomerAddressResponse } from '@/auth/types';\nimport { fetchGraphQl } from '../fetch-graphql';\nimport { CREATE_CUSTOMER_ADDRESS } from './graphql/createCustomerAddress.graphql';\nimport { handleNetworkError } from '@/auth/lib/network-error';\nimport { handleFetchError } from '@/auth/lib/fetch-error';\n\nexport const createCustomerAddress = async (\n  address: AddressFormProps\n): Promise<string> => {\n  return await fetchGraphQl(CREATE_CUSTOMER_ADDRESS, {\n    method: 'POST',\n    variables: {\n      input: address,\n    },\n  })\n    .then((response: CreateCustomerAddressResponse) => {\n      if (response.errors?.length) return handleFetchError(response.errors);\n\n      return response.data.createCustomerAddress.firstname || '';\n    })\n    .catch(handleNetworkError);\n};\n"],"names":["CREATE_CUSTOMER","CREATE_CUSTOMER_V2","createCustomer","forms","apiVersion2","fetchGraphQl","method","variables","input","catch","handleNetworkError","GET_ATTRIBUTES_FORM","getAttributesForm","formCode","replace","trim","cache","then","response","errors","length","handleFetchError","transformAttributesForm","CREATE_CUSTOMER_ADDRESS","createCustomerAddress","address","data","firstname"],"mappings":"yIAAO,MAAMA,EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECAlBC,EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECMrBC,EAAiB,MAC5BC,EACAC,IAEiB,MAAMC,EACrBD,EAAcH,EAAqBD,EACnC,CACEM,OAAQ,OACRC,UAAW,CACTC,MAAO,CACL,GAAGL,CACL,CACF,CAAA,CAEJ,EAAEM,MAAMC,CAAkB,ECpBfC,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECOtBC,EAAoB,MAC/BC,GAEO,MAAMR,EAAaM,EAAoBG,QAAQ,OAAQ,GAAG,EAAEC,OAAQ,CACzET,OAAQ,MACRU,MAAO,cACPT,UAAW,CAAEM,SAAAA,CAAS,CAAA,CACvB,EACEI,KAAmBC,GAAA,OAClB,OAAIA,EAAAA,EAASC,SAATD,MAAAA,EAAiBE,OAAeC,EAAiBH,EAASC,MAAM,EAE7DG,EAAwBJ,CAAQ,CAAA,CACxC,EACAT,MAAMC,CAAkB,ECpBhBa,EAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECM1BC,EAAwB,MACnCC,GAEO,MAAMpB,EAAakB,EAAyB,CACjDjB,OAAQ,OACRC,UAAW,CACTC,MAAOiB,CACT,CAAA,CACD,EACER,KAAMC,GAA4C,OACjD,OAAIA,EAAAA,EAASC,SAATD,MAAAA,EAAiBE,OAAeC,EAAiBH,EAASC,MAAM,EAE7DD,EAASQ,KAAKF,sBAAsBG,WAAa,EAAA,CACzD,EACAlB,MAAMC,CAAkB"}