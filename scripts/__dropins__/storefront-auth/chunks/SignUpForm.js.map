{"version":3,"file":"SignUpForm.js","sources":["../../src/hooks/api/useGetAttributesForm.tsx","../../src/lib/mergeFormObjects.ts","../../src/hooks/components/useSignUpForm.tsx","../../src/components/SignUpForm/SignUpForm.tsx"],"sourcesContent":["import { getAttributesForm } from '@/auth/api';\nimport { useEffect, useState } from 'preact/hooks';\nimport { inputsDefaultValueSetProps } from '@/auth/types';\nimport {\n  DEFAULT_SIGN_UP_FIELDS,\n  SignUpFieldsProps,\n} from '@/auth/configs/defaultCreateUserConfigs';\nimport { AttributesFormItemsProps } from '@/auth/data/models';\nimport { simplifyTransformAttributesForm } from '@/auth/lib/simplifyTransformAttributesForm';\n\ninterface UseGetAttributesFormProps {\n  fieldsConfigForApiVersion1: SignUpFieldsProps[];\n  apiVersion2: boolean;\n  inputsDefaultValueSet?: inputsDefaultValueSetProps[];\n}\n\nconst applyDefaultValuesToFields = (\n  fields: AttributesFormItemsProps[],\n  defaultValues: inputsDefaultValueSetProps[] | any\n) => {\n  if (!defaultValues?.length) return fields;\n\n  return fields.map((el) => {\n    const defaultValue = defaultValues.find(\n      ({ code }: inputsDefaultValueSetProps) => code === el.code\n    )?.defaultValue;\n\n    return defaultValue ? { ...el, defaultValue } : el;\n  });\n};\n\nexport const useGetAttributesForm = ({\n  inputsDefaultValueSet,\n  fieldsConfigForApiVersion1,\n  apiVersion2,\n}: UseGetAttributesFormProps) => {\n  const [fieldsListConfigs, setFieldsListConfigs] = useState<\n    AttributesFormItemsProps[]\n  >([]);\n\n  useEffect(() => {\n    const fetchFieldsConfig = async () => {\n      if (apiVersion2) {\n        const response = await getAttributesForm('customer_account_create');\n\n        if (response?.fields?.length) {\n          if (inputsDefaultValueSet?.length) {\n            const fieldsWithDefaultValues: any = applyDefaultValuesToFields(\n              response?.fields,\n              inputsDefaultValueSet\n            );\n\n            setFieldsListConfigs(fieldsWithDefaultValues);\n          } else {\n            setFieldsListConfigs(response?.fields);\n          }\n        }\n      } else {\n        const transformAttributesFields = simplifyTransformAttributesForm(\n          DEFAULT_SIGN_UP_FIELDS\n        );\n        const transformFieldsConfigForApiVersion1 =\n          simplifyTransformAttributesForm(fieldsConfigForApiVersion1);\n\n        const defaultFieldsWithDefaultValues: any = applyDefaultValuesToFields(\n          transformAttributesFields as AttributesFormItemsProps[],\n          inputsDefaultValueSet\n        );\n\n        setFieldsListConfigs(\n          fieldsConfigForApiVersion1 && fieldsConfigForApiVersion1.length\n            ? transformFieldsConfigForApiVersion1\n            : defaultFieldsWithDefaultValues\n        );\n      }\n    };\n\n    fetchFieldsConfig();\n  }, [apiVersion2, fieldsConfigForApiVersion1, inputsDefaultValueSet]);\n\n  return { fieldsListConfigs };\n};\n","import { DEFAULT_INPUTS_PROPS } from '../configs/defaultCreateUserConfigs';\n\nexport const transformValue = (value: any) => {\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      return value;\n  }\n};\n\nexport const mergeFormObjects = (\n  obj: Record<string, unknown>,\n  apiVersion2: boolean\n): any => {\n  if (!apiVersion2) return obj;\n\n  const result: Record<string, any> = {};\n  result.custom_attributes = [];\n\n  for (const key in obj) {\n    if (!Object.prototype.hasOwnProperty.call(DEFAULT_INPUTS_PROPS, key)) {\n      result.custom_attributes.push({\n        attribute_code: key,\n        value: transformValue(obj[key]),\n      });\n    } else {\n      result[key] = obj[key];\n    }\n  }\n\n  return result;\n};\n","import {\n  createCustomer,\n  createCustomerAddress,\n  getCustomerToken,\n} from '@/auth/api';\nimport { getFormValues } from '@/auth/lib/getFormValues';\nimport { mergeFormObjects } from '@/auth/lib/mergeFormObjects';\nimport { validationUniqueSymbolsPassword } from '@/auth/lib/validationUniqueSymbolsPassword';\nimport { useCallback, useState } from 'preact/hooks';\nimport { UseSingUpFormProps } from '@/auth/types';\nimport { EventsList, publishEvents } from '@/auth/lib/acdl';\nimport { checkIsFunction } from '@/auth/lib/checkIsFunction';\n\nexport const useSignUpForm = ({\n  addressesData,\n  translations,\n  isEmailConfirmationRequired,\n  apiVersion2 = true,\n  passwordConfigs,\n  routeRedirectOnSignIn,\n  routeSignIn,\n  onErrorCallback,\n  onSuccessCallback,\n  setActiveComponent,\n  handleSetInLineAlertProps,\n  routeRedirectOnEmailConfirmationClose,\n}: UseSingUpFormProps) => {\n  const [userEmail, setUserEmail] = useState('');\n  const [showEmailConfirmationForm, setShowEmailConfirmationForm] =\n    useState(false);\n  const [isSuccessful, setIsSuccessful] = useState({\n    userName: '',\n    status: false,\n  });\n  const [signUpPasswordValue, setSignUpPasswordValue] = useState('');\n  const [isClickSubmit, setIsClickSubmit] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isKeepMeLogged, setIsKeepMeLogged] = useState(true);\n\n  const onKeepMeLoggedChange = useCallback(({ target }: any) => {\n    setIsKeepMeLogged(target.checked);\n  }, []);\n\n  const signInButton = useCallback(() => {\n    if (checkIsFunction(setActiveComponent)) {\n      setActiveComponent('signInForm');\n\n      return;\n    }\n\n    if (checkIsFunction(routeSignIn)) {\n      window.location.href = routeSignIn();\n    }\n  }, [setActiveComponent, routeSignIn]);\n\n  const handleSetSignUpPasswordValue = useCallback((value: string) => {\n    setSignUpPasswordValue(value);\n  }, []);\n\n  const handleHideEmailConfirmationForm = useCallback(() => {\n    handleSetInLineAlertProps({});\n    setSignUpPasswordValue('');\n\n    if (checkIsFunction(routeRedirectOnEmailConfirmationClose)) {\n      window.location.href = routeRedirectOnEmailConfirmationClose();\n    } else {\n      setShowEmailConfirmationForm(false);\n      setActiveComponent?.('signInForm');\n    }\n  }, [\n    handleSetInLineAlertProps,\n    routeRedirectOnEmailConfirmationClose,\n    setActiveComponent,\n  ]);\n\n  const onSubmitSignUp = async (event: SubmitEvent, isValid: boolean) => {\n    handleSetInLineAlertProps({});\n\n    setIsLoading(true);\n\n    if (!isValid) {\n      setIsClickSubmit(true);\n      setIsLoading(false);\n\n      return;\n    }\n\n    const key = apiVersion2 ? 'createCustomerV2' : 'createCustomer';\n\n    const formValues = getFormValues(event.target);\n    const { email, password, is_subscribed } = formValues;\n\n    const requiredCharacterClasses =\n      passwordConfigs?.requiredCharacterClasses || 0;\n\n    const requiredPasswordLength = passwordConfigs?.minLength || 1;\n\n    if (\n      !validationUniqueSymbolsPassword(password, requiredCharacterClasses) ||\n      requiredPasswordLength > password?.length\n    ) {\n      setIsClickSubmit(true);\n      setIsLoading(false);\n\n      return;\n    }\n\n    const formData = mergeFormObjects(\n      {\n        ...formValues,\n        is_subscribed: Boolean(is_subscribed) || false,\n      },\n      apiVersion2\n    );\n\n    const { data, errors } = await createCustomer(formData, apiVersion2);\n\n    if (errors && errors?.length) {\n      handleSetInLineAlertProps?.({\n        type: 'error',\n        text: errors[0].message,\n      });\n\n      onErrorCallback?.(errors);\n\n      publishEvents(EventsList.CREATE_ACCOUNT_EVENT, {\n        updateProfile: false,\n      });\n\n      setUserEmail(email);\n    } else {\n      // Success, new account created\n      const customerData = {\n        email: '',\n        ...data?.[key as keyof typeof data],\n      };\n\n      publishEvents(EventsList.CREATE_ACCOUNT_EVENT, {\n        email: customerData?.email,\n        updateProfile: true,\n      });\n\n      if (isEmailConfirmationRequired) {\n        (event.target as HTMLFormElement)?.reset();\n\n        setIsLoading(false);\n        setSignUpPasswordValue('');\n        setShowEmailConfirmationForm(true);\n        setUserEmail(email);\n\n        return;\n      }\n\n      const loginResponse = await getCustomerToken({\n        email,\n        password,\n        translations,\n        handleSetInLineAlertProps,\n        onErrorCallback,\n      });\n\n      if (loginResponse?.userName) {\n        if (addressesData?.length) {\n          for (const address of addressesData) {\n            try {\n              await createCustomerAddress(address);\n            } catch (error) {\n              console.error(\n                translations.failedCreateCustomerAddress,\n                address,\n                error\n              );\n            }\n          }\n        }\n\n        if (checkIsFunction(routeRedirectOnSignIn)) {\n          window.location.href = routeRedirectOnSignIn();\n        } else {\n          onSuccessCallback?.({\n            userName: loginResponse?.userName,\n            status: true,\n          });\n\n          setIsSuccessful({\n            userName: loginResponse?.userName,\n            status: true,\n          });\n        }\n      }\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isKeepMeLogged,\n    userEmail,\n    showEmailConfirmationForm,\n    isSuccessful,\n    isClickSubmit,\n    signUpPasswordValue,\n    isLoading,\n    onSubmitSignUp,\n    signInButton,\n    handleSetSignUpPasswordValue,\n    onKeepMeLoggedChange,\n    handleHideEmailConfirmationForm,\n  };\n};\n","import { FunctionComponent } from 'preact';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/auth/components/SignUpForm/SignUpForm.css';\nimport PasswordValidationMessage from '../PasswordValidationMessage';\nimport { useGetAttributesForm } from '@/auth/hooks/api/useGetAttributesForm';\nimport { useGetStoreConfigs } from '@/auth/hooks/api/useGetStoreConfigs';\nimport { usePasswordValidationMessage } from '@/auth/hooks/components/usePasswordValidationMessage';\nimport { useSignUpForm } from '@/auth/hooks/components/useSignUpForm';\nimport { SignUpFormProps } from '@/auth/types';\nimport {\n  CheckboxField,\n  Button,\n  Form,\n  PasswordField,\n  Title,\n} from '@/auth/components/UI';\nimport { useInLineAlert } from '@/auth/hooks/useInLineAlert';\nimport { InLineAlert } from '@adobe/elsie/components';\nimport EmailConfirmationForm from '../EmailConfirmationForm';\nimport SkeletonLoader from '../SkeletonLoader';\nimport { useText } from '@adobe/elsie/i18n';\n\nexport const SignUpForm: FunctionComponent<SignUpFormProps> = ({\n  addressesData,\n  formSize = 'default',\n  inputsDefaultValueSet,\n  fieldsConfigForApiVersion1,\n  apiVersion2 = true,\n  displayTermsOfUseCheckbox = false,\n  displayNewsletterCheckbox = false,\n  hideCloseBtnOnEmailConfirmation = false,\n  routeRedirectOnEmailConfirmationClose,\n  routeRedirectOnSignIn,\n  routeSignIn,\n  onErrorCallback,\n  onSuccessCallback,\n  setActiveComponent,\n  successNotificationForm,\n}) => {\n  const translations = useText({\n    title: 'Auth.SignUpForm.title',\n    buttonPrimary: 'Auth.SignUpForm.buttonPrimary',\n    buttonSecondary: 'Auth.SignUpForm.buttonSecondary',\n    privacyPolicyDefaultText: 'Auth.SignUpForm.privacyPolicyDefaultText',\n    subscribedDefaultText: 'Auth.SignUpForm.subscribedDefaultText',\n    keepMeLoggedText: 'Auth.SignUpForm.keepMeLoggedText',\n    customerTokenErrorMessage: 'Auth.Api.customerTokenErrorMessage',\n    failedCreateCustomerAddress: 'Auth.SignUpForm.failedCreateCustomerAddress',\n  });\n\n  const { passwordConfigs, isEmailConfirmationRequired } = useGetStoreConfigs();\n  const { fieldsListConfigs } = useGetAttributesForm({\n    fieldsConfigForApiVersion1,\n    apiVersion2,\n    inputsDefaultValueSet,\n  });\n\n  const { inLineAlertProps, handleSetInLineAlertProps } = useInLineAlert();\n\n  const {\n    isKeepMeLogged,\n    userEmail,\n    showEmailConfirmationForm,\n    isSuccessful,\n    isClickSubmit,\n    signUpPasswordValue,\n    isLoading,\n    onSubmitSignUp,\n    signInButton,\n    handleSetSignUpPasswordValue,\n    onKeepMeLoggedChange,\n    handleHideEmailConfirmationForm,\n  } = useSignUpForm({\n    addressesData,\n    translations,\n    isEmailConfirmationRequired,\n    apiVersion2,\n    passwordConfigs,\n    routeRedirectOnSignIn,\n    routeSignIn,\n    onErrorCallback,\n    onSuccessCallback,\n    setActiveComponent,\n    handleSetInLineAlertProps,\n    routeRedirectOnEmailConfirmationClose,\n  });\n\n  const { isValidUniqueSymbols, defaultLengthMessage } =\n    usePasswordValidationMessage({\n      password: signUpPasswordValue,\n      isClickSubmit,\n      passwordConfigs,\n    });\n\n  const shouldShowPersistLoginCheckbox =\n    !isEmailConfirmationRequired && addressesData?.length;\n\n  if (!fieldsListConfigs.length && apiVersion2) {\n    return (\n      <div\n        className={`auth-signUpForm ${formSize} skeleton-loader`}\n        data-testid=\"SignUpForm\"\n      >\n        <SkeletonLoader activeSkeleton=\"signUpForm\" />\n      </div>\n    );\n  }\n\n  if (successNotificationForm && isSuccessful.status) {\n    return successNotificationForm(isSuccessful.userName);\n  }\n\n  if (showEmailConfirmationForm) {\n    return (\n      <EmailConfirmationForm\n        formSize={formSize}\n        userEmail={userEmail}\n        inLineAlertProps={inLineAlertProps}\n        hideCloseBtnOnEmailConfirmation={hideCloseBtnOnEmailConfirmation}\n        handleSetInLineAlertProps={handleSetInLineAlertProps}\n        onPrimaryButtonClick={handleHideEmailConfirmationForm}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={classes(['auth-signUpForm', formSize])}\n      data-testid=\"SignUpForm\"\n    >\n      <Title\n        text={translations.title}\n        bottomLine={false}\n        className=\"auth-signUpForm__title\"\n      />\n      {inLineAlertProps.text ? (\n        <InLineAlert\n          className=\"auth-signUpForm__notification\"\n          type={inLineAlertProps.type}\n          /* \n          TODO - Remove when SDK will be updated\n          https://jira.corp.adobe.com/browse/USF-1240\n          */\n          // @ts-ignore\n          variant=\"secondary\"\n          heading={inLineAlertProps.text}\n          icon={inLineAlertProps.icon}\n        />\n      ) : null}\n      <Form\n        submitCallback={onSubmitSignUp}\n        className=\"auth-signUpForm__form\"\n        isLoading={isLoading}\n        name=\"signUp_form\"\n        fieldsConfig={fieldsListConfigs}\n      >\n        <PasswordField\n          initialPassword={signUpPasswordValue}\n          className=\"auth-signUpForm__form__item\"\n          setPasswordValueCallback={handleSetSignUpPasswordValue}\n          isError={\n            isValidUniqueSymbols === 'error' ||\n            defaultLengthMessage?.status === 'error' ||\n            (isClickSubmit && signUpPasswordValue.length <= 0)\n          }\n        >\n          <PasswordValidationMessage\n            minLength={passwordConfigs?.minLength}\n            requiredCharacterClasses={passwordConfigs?.requiredCharacterClasses}\n            validateLengthConfig={defaultLengthMessage}\n            isValidUniqueSymbols={isValidUniqueSymbols}\n          />\n          {shouldShowPersistLoginCheckbox ? (\n            <div className={'auth-signUpForm__automatic-login'}>\n              <CheckboxField\n                label={translations.keepMeLoggedText}\n                onChange={onKeepMeLoggedChange}\n                initialValue={isKeepMeLogged}\n              />\n            </div>\n          ) : null}\n        </PasswordField>\n\n        {displayNewsletterCheckbox || displayTermsOfUseCheckbox ? (\n          <div className=\"auth-signUpForm__item auth-signUpForm__checkbox\">\n            {displayNewsletterCheckbox ? (\n              <CheckboxField\n                name=\"is_subscribed\"\n                label={translations.subscribedDefaultText}\n              />\n            ) : null}\n\n            {displayTermsOfUseCheckbox ? (\n              <CheckboxField\n                name=\"privacyPolicy\"\n                label={translations.privacyPolicyDefaultText}\n              />\n            ) : null}\n          </div>\n        ) : null}\n\n        <div className=\"auth-signUpForm-buttons\">\n          <Button\n            type=\"button\"\n            variant=\"tertiary\"\n            style={{ padding: 0 }}\n            buttonText={translations.buttonSecondary}\n            enableLoader={false}\n            onClick={signInButton}\n          />\n          <Button\n            type=\"submit\"\n            buttonText={translations.buttonPrimary}\n            variant=\"primary\"\n            enableLoader={isLoading}\n          />\n        </div>\n      </Form>\n    </div>\n  );\n};\n"],"names":["applyDefaultValuesToFields","fields","defaultValues","length","map","el","defaultValue","find","code","useGetAttributesForm","inputsDefaultValueSet","fieldsConfigForApiVersion1","apiVersion2","fieldsListConfigs","setFieldsListConfigs","useState","useEffect","response","getAttributesForm","fieldsWithDefaultValues","transformAttributesFields","simplifyTransformAttributesForm","DEFAULT_SIGN_UP_FIELDS","transformFieldsConfigForApiVersion1","defaultFieldsWithDefaultValues","transformValue","value","mergeFormObjects","obj","result","custom_attributes","key","Object","prototype","hasOwnProperty","call","DEFAULT_INPUTS_PROPS","push","attribute_code","useSignUpForm","addressesData","translations","isEmailConfirmationRequired","passwordConfigs","routeRedirectOnSignIn","routeSignIn","onErrorCallback","onSuccessCallback","setActiveComponent","handleSetInLineAlertProps","routeRedirectOnEmailConfirmationClose","userEmail","setUserEmail","showEmailConfirmationForm","setShowEmailConfirmationForm","isSuccessful","setIsSuccessful","userName","status","signUpPasswordValue","setSignUpPasswordValue","isClickSubmit","setIsClickSubmit","isLoading","setIsLoading","isKeepMeLogged","setIsKeepMeLogged","onKeepMeLoggedChange","useCallback","target","checked","signInButton","checkIsFunction","location","href","handleSetSignUpPasswordValue","handleHideEmailConfirmationForm","onSubmitSignUp","event","isValid","formValues","getFormValues","email","password","is_subscribed","requiredCharacterClasses","requiredPasswordLength","minLength","validationUniqueSymbolsPassword","formData","Boolean","data","errors","createCustomer","type","text","message","publishEvents","EventsList","CREATE_ACCOUNT_EVENT","updateProfile","customerData","reset","loginResponse","getCustomerToken","address","createCustomerAddress","error","console","failedCreateCustomerAddress","SignUpForm","formSize","displayTermsOfUseCheckbox","displayNewsletterCheckbox","hideCloseBtnOnEmailConfirmation","successNotificationForm","useText","title","buttonPrimary","buttonSecondary","privacyPolicyDefaultText","subscribedDefaultText","keepMeLoggedText","customerTokenErrorMessage","useGetStoreConfigs","inLineAlertProps","useInLineAlert","isValidUniqueSymbols","defaultLengthMessage","usePasswordValidationMessage","shouldShowPersistLoginCheckbox","_jsx","className","children","SkeletonLoader","activeSkeleton","EmailConfirmationForm","onPrimaryButtonClick","_jsxs","classes","Title","bottomLine","InLineAlert","variant","heading","icon","Form","submitCallback","name","fieldsConfig","PasswordField","initialPassword","setPasswordValueCallback","isError","PasswordValidationMessage","validateLengthConfig","CheckboxField","label","onChange","initialValue","Button","style","padding","buttonText","enableLoader","onClick"],"mappings":"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"}