{"version":3,"file":"SignInForm.js","sources":["../../src/hooks/components/useSignInForm.tsx","../../src/lib/clearUrlAndReplace.ts","../../src/hooks/useEmailConfirmation.tsx","../../src/components/SignInForm/SignInForm.tsx"],"sourcesContent":["import { getFormValues } from '@/auth/lib/getFormValues';\nimport { useCallback, useState, useMemo, useEffect } from 'preact/hooks';\nimport { getCustomerToken, resendConfirmationEmail } from '@/auth/api';\nimport { useSignInFormProps } from '@/auth/types';\nimport { DEFAULT__SIGN_IN_EMAIL_FIELD } from '@/auth/configs/defaultCreateUserConfigs';\nimport { simplifyTransformAttributesForm } from '@/auth/lib/simplifyTransformAttributesForm';\nimport { checkIsFunction } from '@/auth/lib/checkIsFunction';\n\nexport const useSignInForm = ({\n  emailConfirmationStatusMessage,\n  translations,\n  initialEmailValue,\n  routeSignUp,\n  routeForgotPassword,\n  routeRedirectOnSignIn,\n  onErrorCallback,\n  setActiveComponent,\n  onSuccessCallback,\n  onSignUpLinkClick,\n  handleSetInLineAlertProps,\n  routeRedirectOnEmailConfirmationClose,\n}: useSignInFormProps) => {\n  const [userEmail, setUserEmail] = useState('');\n  const [showEmailConfirmationForm, setShowEmailConfirmationForm] =\n    useState(false);\n  const [signInPasswordValue, setSignInPasswordValue] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [isSuccessful, setIsSuccessful] = useState({\n    userName: '',\n    status: false,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const actionsShowNotificationForm = useCallback(\n    async (email: string) => {\n      await resendConfirmationEmail(email);\n\n      setShowEmailConfirmationForm(true);\n      handleSetInLineAlertProps({});\n    },\n    [handleSetInLineAlertProps]\n  );\n\n  useEffect(() => {\n    if (emailConfirmationStatusMessage?.text) {\n      handleSetInLineAlertProps({\n        text: emailConfirmationStatusMessage.text,\n        type: emailConfirmationStatusMessage.status\n          ? emailConfirmationStatusMessage.status\n          : undefined,\n      });\n    }\n  }, [emailConfirmationStatusMessage, handleSetInLineAlertProps]);\n\n  const emailResendInformationText = useCallback(\n    (email: string) => {\n      if (!translations) return '';\n\n      return (\n        <span className=\"auth-signInForm__resend-email-notification\">\n          {translations.resendEmailInformationText}{' '}\n          <button onClick={() => actionsShowNotificationForm(email)}>\n            {translations.resendEmailButtonText}\n          </button>{' '}\n          {translations.resendEmailAdditionalText}\n        </span>\n      );\n    },\n    [actionsShowNotificationForm, translations]\n  );\n\n  const submitLogInUser = useCallback(\n    async (event: any): Promise<void> => {\n      handleSetInLineAlertProps({});\n\n      setIsLoading(true);\n\n      const formValues = getFormValues(event.target);\n\n      if (!formValues.password) {\n        setPasswordError(true);\n        setIsLoading(false);\n      }\n\n      if (formValues?.email && formValues?.password) {\n        const { email, password } = formValues;\n\n        const loginResponse = await getCustomerToken({\n          email,\n          password,\n          handleSetInLineAlertProps,\n          onErrorCallback,\n          translations,\n        });\n\n        if (loginResponse?.errorMessage?.length) {\n          setUserEmail(email);\n\n          /**\n           * TODO: Use error code when available, instead of comparing to response text\n           *\n           * This implementation is a temporary solution.\n           * The backend functionality is planned to be improved to obtain accurate data that will help correctly identify error types and handle them.\n           */\n          const errorMessage: any = loginResponse.errorMessage.includes(\n            \"This account isn't confirmed. Verify and try again.\"\n          )\n            ? emailResendInformationText(email)\n            : loginResponse.errorMessage;\n\n          handleSetInLineAlertProps({\n            text: errorMessage,\n            type: 'error',\n          });\n\n          setSignInPasswordValue('');\n        }\n\n        if (loginResponse?.userName) {\n          event.target.reset();\n\n          if (checkIsFunction(routeRedirectOnSignIn)) {\n            window.location.href = routeRedirectOnSignIn();\n          } else {\n            onSuccessCallback?.({\n              userName: loginResponse?.userName,\n              status: true,\n            });\n\n            setIsSuccessful({\n              userName: loginResponse?.userName,\n              status: true,\n            });\n          }\n        }\n\n        setPasswordError(false);\n      }\n\n      setIsLoading(false);\n      setSignInPasswordValue('');\n    },\n    [\n      emailResendInformationText,\n      handleSetInLineAlertProps,\n      translations,\n      onErrorCallback,\n      routeRedirectOnSignIn,\n      onSuccessCallback,\n    ]\n  );\n\n  const forgotPasswordCallback = useCallback(() => {\n    if (checkIsFunction(setActiveComponent)) {\n      setActiveComponent('resetPasswordForm');\n\n      return;\n    }\n\n    if (checkIsFunction(routeForgotPassword)) {\n      window.location.href = routeForgotPassword();\n    }\n  }, [routeForgotPassword, setActiveComponent]);\n\n  const onSignUpLinkClickCallback = useCallback(() => {\n    if (checkIsFunction(onSignUpLinkClick)) {\n      onSignUpLinkClick();\n    }\n\n    if (checkIsFunction(setActiveComponent)) {\n      setActiveComponent('signUpForm');\n\n      return;\n    }\n\n    if (checkIsFunction(routeSignUp)) {\n      window.location.href = routeSignUp();\n    }\n  }, [onSignUpLinkClick, routeSignUp, setActiveComponent]);\n\n  const defaultEnhancedEmailFields: any = useMemo(() => {\n    const fieldsList = simplifyTransformAttributesForm(\n      DEFAULT__SIGN_IN_EMAIL_FIELD\n    );\n\n    if (!initialEmailValue?.length) return fieldsList;\n\n    return fieldsList?.map((el: any) => ({\n      ...el,\n      defaultValue: initialEmailValue,\n    }));\n  }, [initialEmailValue]);\n\n  const handledOnPrimaryButtonClick = useCallback(() => {\n    handleSetInLineAlertProps({});\n\n    if (checkIsFunction(routeRedirectOnEmailConfirmationClose)) {\n      window.location.href = routeRedirectOnEmailConfirmationClose();\n    } else {\n      setShowEmailConfirmationForm(false);\n    }\n  }, [handleSetInLineAlertProps, routeRedirectOnEmailConfirmationClose]);\n\n  return {\n    userEmail,\n    defaultEnhancedEmailFields,\n    passwordError,\n    isSuccessful,\n    isLoading,\n    signInPasswordValue,\n    showEmailConfirmationForm,\n    setShowEmailConfirmationForm,\n    setSignInPasswordValue,\n    submitLogInUser,\n    forgotPasswordCallback,\n    onSignUpLinkClickCallback,\n    handledOnPrimaryButtonClick,\n  };\n};\n","export const clearUrlAndReplace = () => {\n  let url = new URL(window.location.href);\n\n  let email = url.searchParams.get('email');\n  let token = url.searchParams.get('key');\n\n  if (email && token) {\n    url.searchParams.delete('email');\n    url.searchParams.delete('key');\n\n    window.history.replaceState({}, document.title, url.toString());\n  }\n};\n","import { useEffect, useState } from 'preact/hooks';\nimport { clearUrlAndReplace } from '../lib/clearUrlAndReplace';\nimport { confirmEmail } from '../api';\nimport { useText } from '@adobe/elsie/i18n';\n\ninterface useEmailConfirmationProps {\n  enableEmailConfirmation: boolean;\n}\n\n// The client receives a confirmation of the validation via email. When the client follows the provided link, they are directed to the login page with three query parameters. If these parameters are present, we make a request to validate the status. This request returns a response that we display to the user.\nexport const useEmailConfirmation = ({\n  enableEmailConfirmation,\n}: useEmailConfirmationProps) => {\n  const translations = useText({\n    accountConfirmMessage: 'Auth.EmailConfirmationForm.accountConfirmMessage',\n    accountConfirmationEmailSuccessMessage:\n      'Auth.EmailConfirmationForm.accountConfirmationEmailSuccessMessage',\n  });\n  const [emailConfirmationStatusMessage, setEmailConfirmationStatusMessage] =\n    useState<{\n      text: string;\n      status: '' | 'success' | 'error';\n    }>({\n      text: '',\n      status: '',\n    });\n\n  useEffect(() => {\n    if (enableEmailConfirmation) {\n      const { search } = window.location;\n\n      if (search.includes('email=') && search.includes('key=')) {\n        const validateEmailStatus = async () => {\n          const params = new URLSearchParams(search);\n\n          const response = await confirmEmail({\n            customerEmail: params.get('email') as string,\n            customerConfirmationKey: params.get('key') as string,\n          });\n\n          if (!response) return null;\n\n          if (response?.errors?.length) {\n            setEmailConfirmationStatusMessage({\n              text: response?.errors[0].message,\n              status: 'error',\n            });\n          } else {\n            setEmailConfirmationStatusMessage({\n              text: response.data.confirmEmail.customer.email\n                ? translations.accountConfirmationEmailSuccessMessage.replace(\n                    '{email}',\n                    response?.data?.confirmEmail.customer?.email\n                  )\n                : translations.accountConfirmMessage,\n              status: 'success',\n            });\n\n            clearUrlAndReplace();\n          }\n        };\n\n        validateEmailStatus();\n      }\n    }\n  }, [enableEmailConfirmation, translations]);\n\n  return { emailConfirmationStatusMessage };\n};\n","import { FunctionComponent } from 'preact';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/auth/components/SignInForm/SignInForm.css';\nimport { useSignInForm } from '@/auth/hooks/components/useSignInForm';\nimport { SignInFormProps } from '@/auth/types';\nimport { useEmailConfirmation } from '@/auth/hooks/useEmailConfirmation';\nimport EmailConfirmationForm from '../EmailConfirmationForm';\nimport { Button, Form, PasswordField, Title } from '@/auth/components/UI';\nimport { useInLineAlert } from '@/auth/hooks/useInLineAlert';\nimport { InLineAlert } from '@adobe/elsie/components';\nimport { useText } from '@adobe/elsie/i18n';\n\nexport const SignInForm: FunctionComponent<SignInFormProps> = ({\n  formSize = 'default',\n  initialEmailValue = '',\n  renderSignUpLink = false,\n  enableEmailConfirmation = false,\n  hideCloseBtnOnEmailConfirmation = false,\n  routeRedirectOnEmailConfirmationClose,\n  routeRedirectOnSignIn,\n  routeForgotPassword,\n  routeSignUp,\n  onSuccessCallback,\n  setActiveComponent,\n  onErrorCallback,\n  onSignUpLinkClick,\n  successNotificationForm,\n}) => {\n  const translations = useText({\n    title: 'Auth.SignInForm.title',\n    buttonPrimary: 'Auth.SignInForm.buttonPrimary',\n    buttonSecondary: 'Auth.SignInForm.buttonSecondary',\n    buttonTertiary: 'Auth.SignInForm.buttonTertiary',\n    resendEmailInformationText:\n      'Auth.Notification.resendEmailNotification.informationText',\n    resendEmailButtonText:\n      'Auth.Notification.resendEmailNotification.buttonText',\n    resendEmailAdditionalText:\n      'Auth.Notification.resendEmailNotification.additionalText',\n    customerTokenErrorMessage: 'Auth.Api.customerTokenErrorMessage',\n  });\n\n  const { emailConfirmationStatusMessage } = useEmailConfirmation({\n    enableEmailConfirmation,\n  });\n\n  const { inLineAlertProps, handleSetInLineAlertProps } = useInLineAlert();\n\n  const {\n    userEmail,\n    defaultEnhancedEmailFields,\n    passwordError,\n    isSuccessful,\n    isLoading,\n    signInPasswordValue,\n    showEmailConfirmationForm,\n    setSignInPasswordValue,\n    submitLogInUser,\n    forgotPasswordCallback,\n    onSignUpLinkClickCallback,\n    handledOnPrimaryButtonClick,\n  } = useSignInForm({\n    translations,\n    emailConfirmationStatusMessage,\n    initialEmailValue,\n    routeSignUp,\n    routeForgotPassword,\n    routeRedirectOnSignIn,\n    setActiveComponent,\n    onErrorCallback,\n    onSuccessCallback,\n    onSignUpLinkClick,\n    handleSetInLineAlertProps,\n    routeRedirectOnEmailConfirmationClose,\n  });\n\n  if (successNotificationForm && isSuccessful.status) {\n    return successNotificationForm(isSuccessful.userName);\n  }\n\n  if (showEmailConfirmationForm) {\n    return (\n      <EmailConfirmationForm\n        formSize={formSize}\n        userEmail={userEmail}\n        inLineAlertProps={inLineAlertProps}\n        hideCloseBtnOnEmailConfirmation={hideCloseBtnOnEmailConfirmation}\n        handleSetInLineAlertProps={handleSetInLineAlertProps}\n        onPrimaryButtonClick={handledOnPrimaryButtonClick}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={classes(['auth-signInForm', formSize])}\n      data-testid=\"signInForm\"\n    >\n      <Title\n        text={translations.title}\n        bottomLine={false}\n        className=\"auth-signInForm__title\"\n      />\n      {inLineAlertProps.text ? (\n        <InLineAlert\n          data-testid=\"authInLineAlert\"\n          className=\"auth-signInForm__notification\"\n          type={inLineAlertProps.type}\n          /* \n          TODO - Remove when SDK will be updated\n          https://jira.corp.adobe.com/browse/USF-1240\n          */\n          // @ts-ignore\n          variant=\"secondary\"\n          heading={inLineAlertProps.text}\n          icon={inLineAlertProps.icon}\n        />\n      ) : null}\n      <Form\n        name=\"signIn_form\"\n        className=\"auth-signInForm__form\"\n        submitCallback={submitLogInUser}\n        isLoading={isLoading}\n        fieldsConfig={defaultEnhancedEmailFields}\n      >\n        <PasswordField\n          className=\"auth-signInForm__form__password\"\n          isError={passwordError}\n          initialPassword={signInPasswordValue}\n          setPasswordValueCallback={setSignInPasswordValue}\n        />\n        <div className=\"auth-signInForm__form__buttons\">\n          <div className=\"auth-signInForm__form__buttons--combine\">\n            <Button\n              type=\"button\"\n              variant=\"tertiary\"\n              style={{ padding: 0 }}\n              buttonText={translations.buttonTertiary}\n              className=\"auth-signInForm__button auth-signInForm__button--forgot\"\n              enableLoader={false}\n              onClick={forgotPasswordCallback}\n              data-testid=\"switchToSignUp\"\n            />\n            {renderSignUpLink ? <span /> : null}\n            {renderSignUpLink ? (\n              <Button\n                type=\"button\"\n                variant=\"tertiary\"\n                style={{ padding: 0 }}\n                buttonText={translations.buttonSecondary}\n                className=\"auth-signInForm__button auth-signInForm__button--signup\"\n                enableLoader={false}\n                onClick={onSignUpLinkClickCallback}\n              />\n            ) : null}\n          </div>\n          <Button\n            type=\"submit\"\n            buttonText={translations.buttonPrimary}\n            variant=\"primary\"\n            className=\"auth-signInForm__button auth-signInForm__button--submit\"\n            enableLoader={isLoading}\n          />\n        </div>\n      </Form>\n    </div>\n  );\n};\n"],"names":["useSignInForm","emailConfirmationStatusMessage","translations","initialEmailValue","routeSignUp","routeForgotPassword","routeRedirectOnSignIn","onErrorCallback","setActiveComponent","onSuccessCallback","onSignUpLinkClick","handleSetInLineAlertProps","routeRedirectOnEmailConfirmationClose","userEmail","setUserEmail","useState","showEmailConfirmationForm","setShowEmailConfirmationForm","signInPasswordValue","setSignInPasswordValue","passwordError","setPasswordError","isSuccessful","setIsSuccessful","userName","status","isLoading","setIsLoading","actionsShowNotificationForm","useCallback","email","resendConfirmationEmail","useEffect","text","type","undefined","emailResendInformationText","_jsxs","className","children","resendEmailInformationText","_jsx","onClick","resendEmailButtonText","resendEmailAdditionalText","submitLogInUser","event","formValues","getFormValues","target","password","loginResponse","getCustomerToken","errorMessage","length","includes","reset","checkIsFunction","location","href","forgotPasswordCallback","onSignUpLinkClickCallback","defaultEnhancedEmailFields","useMemo","fieldsList","simplifyTransformAttributesForm","DEFAULT__SIGN_IN_EMAIL_FIELD","map","el","defaultValue","handledOnPrimaryButtonClick","clearUrlAndReplace","url","URL","window","searchParams","get","token","delete","history","replaceState","document","title","toString","useEmailConfirmation","enableEmailConfirmation","useText","accountConfirmMessage","accountConfirmationEmailSuccessMessage","setEmailConfirmationStatusMessage","search","params","URLSearchParams","response","confirmEmail","customerEmail","customerConfirmationKey","errors","message","data","customer","replace","SignInForm","formSize","renderSignUpLink","hideCloseBtnOnEmailConfirmation","successNotificationForm","buttonPrimary","buttonSecondary","buttonTertiary","customerTokenErrorMessage","inLineAlertProps","useInLineAlert","EmailConfirmationForm","onPrimaryButtonClick","classes","Title","bottomLine","InLineAlert","variant","heading","icon","Form","name","submitCallback","fieldsConfig","PasswordField","isError","initialPassword","setPasswordValueCallback","Button","style","padding","buttonText","enableLoader"],"mappings":"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"}