{"version":3,"file":"UpdatePassword.js","sources":["../../src/lib/getUrlParam.ts","../../src/hooks/components/useUpdatePasswordForm.tsx","../../src/components/UpdatePasswordForm/UpdatePasswordForm.tsx","../../src/containers/UpdatePassword/UpdatePassword.tsx"],"sourcesContent":["export const getUrlParam = (url: string, param: string): string => {\n  const result = url\n    .split('&')\n    .filter(el => el.includes(param))\n    .map(item => {\n      return item.split('=')[1];\n    });\n\n  return result[0];\n};\n","import { resetPassword, getCustomerToken } from '@/auth/api';\nimport { getFormValues } from '@/auth/lib/getFormValues';\nimport { getUrlParam } from '@/auth/lib/getUrlParam';\nimport { validationUniqueSymbolsPassword } from '@/auth/lib/validationUniqueSymbolsPassword';\nimport { useCallback, useEffect, useState } from 'preact/hooks';\nimport { UseUpdatePasswordFormProps } from '@/auth/types';\nimport { useText } from '@adobe/elsie/i18n';\nimport { checkIsFunction } from '@/auth/lib/checkIsFunction';\n\nexport const useUpdatePasswordForm = ({\n  isEmailConfirmationRequired,\n  signInOnSuccess,\n  passwordConfigs,\n  routeRedirectOnSignIn,\n  routeWrongUrlRedirect,\n  onErrorCallback,\n  onSuccessCallback,\n  handleSetInLineAlertProps,\n  routeRedirectOnPasswordUpdate,\n}: UseUpdatePasswordFormProps) => {\n  const translations = useText({\n    errorNotification: 'Auth.Notification.errorNotification',\n    updatePasswordMessage: 'Auth.Notification.updatePasswordMessage',\n    customerTokenErrorMessage: 'Auth.Api.customerTokenErrorMessage',\n  });\n\n  const [isSuccessful, setIsSuccessful] = useState({\n    userName: '',\n    status: false,\n  });\n  const [updatePasswordValue, setUpdatePasswordValue] = useState('');\n  const [isClickSubmit, setIsClickSubmit] = useState(false);\n  const [email, setEmail] = useState('');\n  const [token, setToken] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const { search } = window.location;\n\n    if (\n      !search.includes('token=') &&\n      !search.includes('email=') &&\n      checkIsFunction(routeWrongUrlRedirect)\n    ) {\n      window.location.href = routeWrongUrlRedirect();\n    }\n\n    const url = decodeURIComponent(search);\n    const tokenParam = getUrlParam(url, 'token');\n    const emailParam = getUrlParam(url, 'email');\n\n    setEmail(emailParam);\n    setToken(tokenParam);\n  }, [routeWrongUrlRedirect]);\n\n  const submitUpdatePassword = useCallback(\n    async (event: Event): Promise<void> => {\n      event.preventDefault();\n\n      setIsLoading(true);\n\n      const formValues = getFormValues(event.target);\n      const validationData = formValues?.password && email && token;\n\n      const requiredCharacterClasses =\n        passwordConfigs?.requiredCharacterClasses || 0;\n      const minLength = passwordConfigs?.minLength || 0;\n\n      if (\n        !validationUniqueSymbolsPassword(\n          formValues?.password,\n          requiredCharacterClasses\n        ) ||\n        formValues.password.length < +minLength\n      ) {\n        setIsClickSubmit(true);\n        setIsLoading(false);\n\n        return;\n      }\n\n      if (!validationData) {\n        handleSetInLineAlertProps({\n          type: 'error',\n          text: translations.errorNotification,\n        });\n\n        setIsLoading(false);\n\n        return;\n      }\n\n      const { message, success } = await resetPassword(\n        email,\n        token,\n        formValues.password\n      );\n\n      if (success) {\n        if (\n          isEmailConfirmationRequired ||\n          (!isEmailConfirmationRequired && !signInOnSuccess)\n        ) {\n          if (checkIsFunction(routeRedirectOnPasswordUpdate)) {\n            window.location.href = routeRedirectOnPasswordUpdate();\n          }\n\n          setIsClickSubmit(true);\n          setIsLoading(false);\n          handleSetInLineAlertProps({\n            type: 'success',\n            text: translations.updatePasswordMessage,\n          });\n          setUpdatePasswordValue('');\n\n          return;\n        }\n\n        const loginResponse = await getCustomerToken({\n          email,\n          password: formValues.password,\n          handleSetInLineAlertProps,\n          onErrorCallback,\n          translations,\n        });\n\n        if (loginResponse?.userName) {\n          if (checkIsFunction(routeRedirectOnSignIn)) {\n            window.location.href = routeRedirectOnSignIn();\n          } else {\n            setIsSuccessful({\n              userName: loginResponse?.userName,\n              status: true,\n            });\n            onSuccessCallback?.(loginResponse?.userName);\n          }\n        }\n      } else {\n        handleSetInLineAlertProps({ type: 'error', text: message });\n        onErrorCallback?.({ message, success });\n      }\n\n      setIsLoading(false);\n    },\n    [\n      email,\n      token,\n      passwordConfigs,\n      isEmailConfirmationRequired,\n      translations,\n      signInOnSuccess,\n      handleSetInLineAlertProps,\n      routeRedirectOnSignIn,\n      routeRedirectOnPasswordUpdate,\n      onErrorCallback,\n      onSuccessCallback,\n    ]\n  );\n\n  const handleSetUpdatePasswordValue = useCallback((value: string) => {\n    setUpdatePasswordValue(value);\n  }, []);\n\n  return {\n    isSuccessful,\n    updatePasswordValue,\n    isClickSubmit,\n    isLoading,\n    submitUpdatePassword,\n    handleSetUpdatePasswordValue,\n  };\n};\n","import { FunctionComponent } from 'preact';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/auth/components/UpdatePasswordForm/UpdatePasswordForm.css';\nimport PasswordValidationMessage from '@/auth/components/PasswordValidationMessage';\nimport { useGetStoreConfigs } from '@/auth/hooks/api/useGetStoreConfigs';\nimport { usePasswordValidationMessage } from '@/auth/hooks/components/usePasswordValidationMessage';\nimport { useUpdatePasswordForm } from '@/auth/hooks/components/useUpdatePasswordForm';\nimport { UpdatePasswordFormProps } from '@/auth/types';\nimport { useText } from '@adobe/elsie/i18n';\nimport { Button, Form, PasswordField, Title } from '@/auth/components/UI';\nimport { useInLineAlert } from '@/auth/hooks/useInLineAlert';\nimport { InLineAlert } from '@adobe/elsie/components';\n\nexport const UpdatePasswordForm: FunctionComponent<UpdatePasswordFormProps> = ({\n  signInOnSuccess = true,\n  formSize = 'default',\n  routeRedirectOnSignIn,\n  routeWrongUrlRedirect,\n  successNotificationForm,\n  onErrorCallback,\n  onSuccessCallback,\n  routeRedirectOnPasswordUpdate,\n}) => {\n  const translations = useText({\n    title: 'Auth.UpdatePasswordForm.title',\n    buttonPrimary: 'Auth.UpdatePasswordForm.buttonPrimary',\n  });\n\n  const { passwordConfigs, isEmailConfirmationRequired } = useGetStoreConfigs();\n\n  const { inLineAlertProps, handleSetInLineAlertProps } = useInLineAlert();\n\n  const {\n    isSuccessful,\n    updatePasswordValue,\n    isClickSubmit,\n    isLoading,\n    submitUpdatePassword,\n    handleSetUpdatePasswordValue,\n  } = useUpdatePasswordForm({\n    isEmailConfirmationRequired,\n    signInOnSuccess,\n    passwordConfigs,\n    routeRedirectOnSignIn,\n    routeWrongUrlRedirect,\n    onErrorCallback,\n    onSuccessCallback,\n    handleSetInLineAlertProps,\n    routeRedirectOnPasswordUpdate,\n  });\n\n  const { isValidUniqueSymbols, defaultLengthMessage } =\n    usePasswordValidationMessage({\n      password: updatePasswordValue,\n      isClickSubmit,\n      passwordConfigs,\n    });\n\n  if (successNotificationForm && isSuccessful.status) {\n    return successNotificationForm(isSuccessful.userName);\n  }\n\n  return (\n    <div className={classes(['auth-updatePasswordForm', formSize])}>\n      <Title\n        text={translations.title}\n        bottomLine={false}\n        className=\"auth-updatePasswordForm__title\"\n      />\n      {inLineAlertProps.text ? (\n        <InLineAlert\n          className=\"auth-updatePasswordForm__notification\"\n          /* \n          TODO - Remove when SDK will be updated\n          https://jira.corp.adobe.com/browse/USF-1240\n          */\n          // @ts-ignore\n          variant=\"secondary\"\n          heading={inLineAlertProps.text}\n          icon={inLineAlertProps.icon}\n        />\n      ) : null}\n      <Form\n        name=\"updatePassword_form\"\n        className=\"auth-updatePasswordForm__form\"\n        submitCallback={submitUpdatePassword}\n        isLoading={isLoading}\n        fieldsConfig={[]}\n      >\n        <PasswordField\n          initialPassword={updatePasswordValue}\n          required={true}\n          className=\"auth-updatePasswordForm__form__item\"\n          setPasswordValueCallback={handleSetUpdatePasswordValue}\n          isError={\n            isValidUniqueSymbols === 'error' ||\n            defaultLengthMessage?.status === 'error'\n          }\n        >\n          <PasswordValidationMessage\n            minLength={passwordConfigs?.minLength}\n            requiredCharacterClasses={passwordConfigs?.requiredCharacterClasses}\n            validateLengthConfig={defaultLengthMessage}\n            isValidUniqueSymbols={isValidUniqueSymbols}\n          />\n        </PasswordField>\n        <div className=\"auth-updatePasswordForm__button\">\n          <Button\n            type=\"submit\"\n            buttonText={translations.buttonPrimary}\n            variant=\"primary\"\n            enableLoader={isLoading}\n          />\n        </div>\n      </Form>\n    </div>\n  );\n};\n","import { Container } from '@adobe/elsie/lib';\nimport UpdatePasswordForm from '@/auth/components/UpdatePasswordForm';\nimport { UpdatePasswordProps } from '@/auth/types';\n\nexport const UpdatePassword: Container<UpdatePasswordProps> = ({\n  formSize,\n  signInOnSuccess,\n  routeRedirectOnPasswordUpdate,\n  routeRedirectOnSignIn,\n  routeWrongUrlRedirect,\n  successNotificationForm,\n  onErrorCallback,\n  onSuccessCallback,\n}) => {\n  return (\n    <div className=\"auth-update-password\">\n      <UpdatePasswordForm\n        formSize={formSize}\n        signInOnSuccess={signInOnSuccess}\n        routeRedirectOnSignIn={routeRedirectOnSignIn}\n        routeWrongUrlRedirect={routeWrongUrlRedirect}\n        onErrorCallback={onErrorCallback}\n        onSuccessCallback={onSuccessCallback}\n        successNotificationForm={successNotificationForm}\n        routeRedirectOnPasswordUpdate={routeRedirectOnPasswordUpdate}\n      />\n    </div>\n  );\n};\n"],"names":["getUrlParam","url","param","split","filter","el","includes","map","item","useUpdatePasswordForm","isEmailConfirmationRequired","signInOnSuccess","passwordConfigs","routeRedirectOnSignIn","routeWrongUrlRedirect","onErrorCallback","onSuccessCallback","handleSetInLineAlertProps","routeRedirectOnPasswordUpdate","translations","useText","errorNotification","updatePasswordMessage","customerTokenErrorMessage","isSuccessful","setIsSuccessful","useState","userName","status","updatePasswordValue","setUpdatePasswordValue","isClickSubmit","setIsClickSubmit","email","setEmail","token","setToken","isLoading","setIsLoading","useEffect","search","window","location","checkIsFunction","href","decodeURIComponent","tokenParam","emailParam","submitUpdatePassword","useCallback","event","preventDefault","formValues","getFormValues","target","validationData","password","requiredCharacterClasses","minLength","validationUniqueSymbolsPassword","length","type","text","message","success","resetPassword","loginResponse","getCustomerToken","handleSetUpdatePasswordValue","value","UpdatePasswordForm","formSize","successNotificationForm","title","buttonPrimary","useGetStoreConfigs","inLineAlertProps","useInLineAlert","isValidUniqueSymbols","defaultLengthMessage","usePasswordValidationMessage","_jsxs","className","classes","children","_jsx","Title","bottomLine","InLineAlert","variant","heading","icon","Form","name","submitCallback","fieldsConfig","PasswordField","initialPassword","required","setPasswordValueCallback","isError","PasswordValidationMessage","validateLengthConfig","Button","buttonText","enableLoader","UpdatePassword"],"mappings":"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"}